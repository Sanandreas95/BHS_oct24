from openpyxl import Workbook
from openpyxl import load_workbook
import pandas as pd
import numpy as np
from openpyxl.styles import Alignment
from openpyxl.styles import PatternFill




input_file = r'D:\Input\Cigarette\Brand Health Study(October 2024)\Input\Data input\36.BHS.xlsx'
input_sheet = 'Sheet1'
output_path = r'D:\Input\Cigarette\Brand Health Study(October 2024)\Input\Python output\Error\34.Vijayawada_BHSerror.xlsx'
df = pd.read_excel(input_file,input_sheet)



input_file1 = r'D:\Input\Cigarette\Brand Health Study(October 2024)\Input\Data input\Cancelled ID\Cancelled IDs - v2 14 Nov 2024.xlsx'
input_sheet1 = 'Sheet1'
df_todelete=pd.read_excel(input_file1,input_sheet1)

df = df[~df['SbjNum'].isin(df_todelete['SbjNum'])]



df=df[df['Q2'] ==5]
# df=df[df['Q1_1']==1]

df['Date'] = pd.to_datetime(df['Date'], format='%d-%m-%Y %H:%M:%S')
# df = df[df['Date'].dt.date.isin([pd.Timestamp('2024-11-01').date(), pd.Timestamp('2024-11-02').date()])]

# df = df[df['Date'].dt.date == pd.Timestamp('2024-11-13').date()]





# Core brands list


# For Malda
# core_brands = ['Special Red Longs - len 69 -Rs 60/10 pc','Flake Special Filter - len 64 -Rs 70/10 pc','Special Red Signature - len 64 -Rs 49/10 pc','Navy Cut Virginia Filter - len 64 -Rs 50/10 pc','Gold Flake Super Star - len 64 -Rs 60/10 pc','Wills Navy Cut Filter - len 69 -Rs 80/10 pc','Special Blues - len 69']

# # For Coochbehar
# core_brands = ['Special Red Longs - len 69 -Rs 60/10 pc','Flake Special Filter - len 64 -Rs 70/10 pc','Special Red Signature - len 64 -Rs 49/10 pc','Navy Cut Virginia Filter - len 64 -Rs 50/10 pc','Gold Flake Super Star - len 64 -Rs 60/10 pc','Marlboro Pocket Filter - len 64 -Rs 70/10 pc (Q32. Do you consider your regular brand of cigarette to be,)','Special Blues - len 69']



# # For Bilaspur
# core_brands = ['Blue Charms - len 64 -Rs 48/10 Pc', 'Flake Excel - len 64 -Rs 65/10 Pc','Flake Liberty - len 64 -Rs 48/10 Pc','Marlboro Pocket Filter - len 64 -Rs 70/10 pc']


# # For Vizag and Vijayawada
core_brands = ['Blue Charms - len 64 -Rs 48/10 Pc', 'Will Flake Premium Filter - len 69 -Rs 90/10 Pc','Duke - len 64 -Rs 50/10 Pc','Berkeley - len 64 -Rs 60/10 Pc']












# ID_to_exclude = [210777004,210844981,211205743,210845893,211167584,211167602,211168044,211168049,211198899,211144726,211231256,211249825,211251795,211253025,210838938,210839088,210841644,210843453,210844810,210846789,210850696,210904706,210906670,210907729,210908512,210909983,210911099,211264913,211264914,211352357,211352361,211248632,211249351,211249871,211250697,211251488,211252071,211252974,211253928,211254778,211256072,211306473,211306474,211354188,211354189,211354190,211354191,211354192,211411349,211411350,211411351,211411352,211411353,211411354]
# df = df[~df['SbjNum'].isin(ID_to_exclude)]

# entries_to_exclude = ['test', 'trr','demo','test']
# df = df[~df['Interviewer'].isin(entries_to_exclude)]





# For Random
# df=df[df['A_Segment_1']==1]

# For Booster
# df=df[df['A_Segment_2']==1]

# BOOSTER :NEW ENTRANT
# df=df[df['A_Segment_3']==1]

# BOOSTER: BRAND SWITCHER
# df=df[df['A_Segment_4']==1]







# Writing Error index in dataframe

# Error_n = ['Count1: Zone Quota ']
# df_name= pd.DataFrame(Error_n) 
# df_name.to_excel(output_path, index=False, header=False)


# Step 1: Create a list of topic names
topics = ['Count1: Zone Quota', 'Count2: SEC count', 'Count3 : Age count', 'Count4 : MOUB count', 'Count5:Age wise brands', 'Count6:SEC wise brands','Count7:SEC wise smoking category','Error1: Time outside of 8:00-20:00', 'Error2: Age vs CWE', ' Error3:No. of categories coded for Q11 ','Error4:No. of sticks', 'Error5: Started smoking before 15 or after 25 years age ', ' Error6:frequency of number of brands selected  by each interviewer in spontaneous awareness(Q14)','Error7:Regular brand not in TOM ','Error8:Regular brand not in TOM  or spont','Error9: Frequency of number of brands selected  by each interviewer in aided awareness(Q15)','Error10: Frequency of number of brands selected  by each interviewer in ever smoked(Q16)','Error11: Frequency of number of brands selected  by each interviewer in ever smoked in last 2 years (Q17)','Error12: Frequency of number of brands selected  by each interviewer in ever smoked in last 1 year (Q18)','Error13: Frequency of number of brands selected  by each interviewer in ever smoked in last 1 month (Q19)','Error14 Frequency of number of brands selected  by each interviewer in ever smoked in last 2 weeks(Q20.1)','Error15: Frequency of number of brands selected  by each interviewer in ever smoked in last 1 week(Q20)','Error16: No. of sticksof regular brand (Q23)','Error17: Difference between avg sticks smoked/day & regular brand stick smoked/day','Error18: Price fluctuation between Previous  & regular brand ','Error19: Price fluctuation between alternate  & regular brand ','Error20:Price quoted for MOUB','Error21: Percentage of loose vs pack','Error22: Sticks, a pack consist of?',' Error23: Mild or strong? (Q31)',' Error24: Regualr brand is Mild or strong? (Q32)',' Error26: Number of times Statements being coded (C1)','  Error27: Statement selection (C2)',' Error28: Just Right scale (C3)',' Error30: Reasons to smoke regular brand (D1)',' Error: Awareness of Cig with Capsule (H1)',' Error: Capsule bursting (H5)',' Error: Reasons not regularly smoke a Capsule cigarette (H7)',' Error: Seen this PACKET of cigarette brand Blue Charms? (S3)',' Error: How much do you like the PACKET of this cigarette brand? (S4)','  Error: how much you agree or disagree with each of the statement (S5)','  Error: GPS data absent','Error:For brand frequency count interview wise (E1)','Error:For brand frequency count interview wise (G1']


df_name = pd.DataFrame(topics, columns=['Logic list'])
# df_name = pd.DataFrame({
#     'Logic list 1': topics1,
#     'Logic list 2': topics2,
#     'Logic list 3': topics3
# })




df_name.to_excel(output_path, index=False)




def inside_append_dataframe_with_blank_rows(file_path, dataframe, blank_rows=2):
    """
    Appends a DataFrame to an existing Excel file with a specified number of blank rows in between.

    Parameters:
    - file_path: str, path to the Excel file
    - dataframe: pd.DataFrame, DataFrame to append
    - blank_rows: int, number of blank rows between appended DataFrames (default is 5)
    """
    
    with pd.ExcelWriter(
            file_path,
            engine='openpyxl',
            mode='a',
            if_sheet_exists='overlay') as writer:
        reader = pd.read_excel(file_path)
        dataframe.to_excel(
            writer,
            startrow=reader.shape[0] + blank_rows,
            index=True,
            header=True)
    workbook = load_workbook(file_path)
    sheet = workbook.active
    fill = PatternFill(start_color="E6E6FA", end_color="E6E6FA", fill_type="solid")
    for row in range(startrow + 4, startrow + 3 + len(dataframe)):
        cell = sheet.cell(row=row, column=1)  # Assuming index is in the first column
        cell.fill = fill
    workbook.save(file_path)      
         
    # workbook = load_workbook(file_path)
    # worksheet = workbook.active

    # # Center-align the text in the appended DataFrame
    # for row in worksheet.iter_rows(min_row=startrow + 1, max_row=startrow + len(dataframe) + 3, min_col=1, max_col=len(dataframe.columns) + 1):
    #     for cell in row:
    #         cell.alignment = Alignment(horizontal='center', vertical='center')

    # # Save the workbook
    # workbook.save(file_path)     

 





def outside_append_dataframe_with_blank_rows(file_path, dataframe, blank_rows=5):
    """
    Appends a DataFrame to an existing Excel file with a specified number of blank rows in between.

    Parameters:
    - file_path: str, path to the Excel file
    - dataframe: pd.DataFrame, DataFrame to append
    - blank_rows: int, number of blank rows between appended DataFrames (default is 5)
    """
    
    with pd.ExcelWriter(
            file_path,
            engine='openpyxl',
            mode='a',
            if_sheet_exists='overlay') as writer:
        reader = pd.read_excel(file_path)
        dataframe.to_excel(
            writer,
            startrow=reader.shape[0] + blank_rows,
            index=True,
            header=True)











# Count1: Zone count  


Error_n = ['Count1 :Zone count']
df_name= pd.DataFrame(Error_n) 
existing_df = pd.read_excel(output_path)
startrow = existing_df.shape[0] + 4
with pd.ExcelWriter(output_path, engine='openpyxl', mode='a', if_sheet_exists='overlay') as writer:
    df_name.to_excel(writer, startrow=startrow, index=False, header=False)



df_global=df.copy()
input_string1=[1,2,3,4]
input_string2=['North','East','West','South']
dictionary = dict(zip(input_string1, input_string2))
df_global['Zone'] = df_global['Zone'].replace(dictionary)
df_s = df_global['Zone'].value_counts()
Valuecount=pd.DataFrame(df_s)
total_sum = Valuecount.sum()
total_sum.name = 'Total'
Valuecount=Valuecount._append(total_sum)
inside_append_dataframe_with_blank_rows(output_path, Valuecount)





# Count2: SEC count  


Error_n = ['Count2: SEC count ']
df_name= pd.DataFrame(Error_n) 
existing_df = pd.read_excel(output_path)
startrow = existing_df.shape[0] + 4
with pd.ExcelWriter(output_path, engine='openpyxl', mode='a', if_sheet_exists='overlay') as writer:
    df_name.to_excel(writer, startrow=startrow, index=False, header=False)



df_global=df.copy()
input_string1=[1,2,3,4]
input_string2=['SEC A','SEC B','SEC C','SEC D']
dictionary = dict(zip(input_string1, input_string2))
df_global['SEC_Q'] = df_global['SEC_Q'].replace(dictionary)
df_s = df_global['SEC_Q'].value_counts()
Valuecount=pd.DataFrame(df_s)
total_sum = Valuecount.sum()
total_sum.name = 'Total'
Valuecount=Valuecount._append(total_sum)
inside_append_dataframe_with_blank_rows(output_path, Valuecount)





# Count3 : Age count

Error_n = ['Count3 : Age count']
df_name= pd.DataFrame(Error_n) 
existing_df = pd.read_excel(output_path)
startrow = existing_df.shape[0] + 4
with pd.ExcelWriter(output_path, engine='openpyxl', mode='a', if_sheet_exists='overlay') as writer:
    df_name.to_excel(writer, startrow=startrow, index=False, header=False)



df_global=df.copy()
df_global.reset_index(drop=True, inplace=True)
df_global['Q6'] = pd.to_numeric(df_global['Q6'], errors='coerce')
def categorize_scores(score):
    
    if 21<=score <= 25:
        return '21-25 Yrs'
    elif 26 <= score <= 30:
        return '26-30 Yrs'
    elif 31<=score <= 35:
        return '31-35 Yrs'
    elif 36<=score<=40:
        return '36-40 Yrs'
    elif 41<=score<=45:
        return '41-45 Yrs'
    elif 46<=score<=50:
        return '46-50 Yrs'
    else:
        return 'Other'
    
    
df_global['Age'] = df_global['Q6'].apply(categorize_scores)       
counts_p = df_global['Age'].value_counts()
Valuecount=pd.DataFrame(counts_p)
total_sum = Valuecount.sum()
total_sum.name = 'Total'
Valuecount=Valuecount._append(total_sum)
inside_append_dataframe_with_blank_rows(output_path, Valuecount)







# Count4 : MOUB count

Error_n = ['Count4 : MOUB count ']
df_name= pd.DataFrame(Error_n) 
existing_df = pd.read_excel(output_path)
startrow = existing_df.shape[0] + 4
with pd.ExcelWriter(output_path, engine='openpyxl', mode='a', if_sheet_exists='overlay') as writer:
    df_name.to_excel(writer, startrow=startrow, index=False, header=False)


df_global=df.copy()
input_string1=[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101]
string="American Club ,Cavanders Gold Rich Taste ,Chancellor ,Charminar Filter ,Charms Special Blue ,Classic ,Editions Trio ,Flake Special Filter ,Focus Mint  ,Gold Flake Kings ,Gold Flake Premium ,Gold Flake Premium Neo Smart ,Gold Flake Indie Mint ,Gold Flake Special ,Gold Flake Special Mint ,Gold Flake Super Star ,India King ,Marlboro KSFT ,Marlboro Advance Compact ,Marlboro Pocket Filter ,Navy Cut Fruit ,Navy Cut Virginia Filter ,Red & White Select ,Red & White Select,Regent ,Regent Black ,Regent Cool ,Silk Cut Blue ,Silk Cut Filter ,Silk Cut Virginia ,Special Blues ,Special Red Longs ,Special Red Signature ,Stellar Cool Blast  ,T3 White  ,Total Refresh ,Total Royal Twist ,Total Spearmint ,Wave Cool Mint ,Wills Navy Cut Filter ,Wills Navy Cut,American Club Mint ,American Club Smash ,American Fruit ,Benson & Hedges  ,Berkeley ,Berkely ,Blue Charms ,Blue Charms ,Bristol ,Cavander Gold  ,Chancellor ,Charminar Plains ,Charms Regular Filter ,Classic Connect ,Classic Ice Burst ,Club One ,Duke ,Editions Active Mint ,Editions Ice Fruit ,Editions Spark ,Flake Excel ,Flake Liberty ,Flake Mint Switch ,Flake Nova ,Flake White ,Gold Flake Century ,Gold Flake Filter ,Gold Flake Filter ,Gold Flake Kings ,Gold Flake Kings Lights ,Gold Flake Kings SLK ,Golden Gold Flake ,Kingston ,Marlboro Clove ,Marlboro Fuse Beyond ,NATIONAL GOLD FLAKE ,Navy Cut Deluxe Filter ,Originals ,Panama ,Panama Filter ,Panama Filter ,Player's Fruit ,Player's Mint ,Royal ,Scissors Menthol  ,Classic ,Stellar Slims Define ,Stellar Slims Shift ,Total Active Mint ,Wave Fruity ,Wave Mint ,Will Flake Premium Filter ,Zaffran ,American Club Clove Magik ,Classic AlphaTec ,Classic Double Burst ,Classic Verve ,Stellar Define Pan ,Stellar Shift Duos ,Wills Insignia "
input_string2 = string.split(',')  
# Remove leading and trailing spaces from each item
input_string2 = [item.strip() for item in input_string2]
dictionary = dict(zip(input_string1, input_string2))
df_global['Q21'] = df_global['Q21'].replace(dictionary)



df_modified = df_global.loc[:,['Q21','Interviewer']]
crosstab_result = pd.crosstab(df_modified['Q21'], df_modified['Interviewer'])
count1=pd.DataFrame(crosstab_result )
count1['Total']=count1.sum(min_count=1,axis=1)

# total_number = 200


total=count1.sum()
# total.name='Total'
# count1=count1._append(total)
count1.loc['Total']=total
# count2=(count1 / total_number) * 100



total_interviews = crosstab_result.values.sum()
crosstab_percentage = (crosstab_result / total_interviews) * 100
crosstab_percentage = crosstab_percentage.round(0)
crosstab_percentage['(%)'] = crosstab_percentage.sum(axis=1)
crosstab_percentage = crosstab_percentage[['(%)'] + [col for col in crosstab_percentage.columns if col != '(%)']]

count2=pd.DataFrame(crosstab_percentage )
# count2['Total']=count1.sum(min_count=1,axis=1)
# total=count2.sum()
# count2.loc['Total']=total




inside_append_dataframe_with_blank_rows(output_path, count1)
inside_append_dataframe_with_blank_rows(output_path, count2)

# counts_p = df['Q21'].value_counts()
# Valuecount=pd.DataFrame(counts_p)
# total_sum = Valuecount.sum()
# total_sum.name = 'Total'
# Valuecount=Valuecount._append(total_sum)
# inside_append_dataframe_with_blank_rows(output_path, Valuecount)









# Count5:Age wise brands 


Error_n = ['Count5:Age wise brands']
df_name= pd.DataFrame(Error_n) 
existing_df = pd.read_excel(output_path)
startrow = existing_df.shape[0] + 4
with pd.ExcelWriter(output_path, engine='openpyxl', mode='a', if_sheet_exists='overlay') as writer:
    df_name.to_excel(writer, startrow=startrow, index=False, header=False)



df_global=df.copy()



input_string1=[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101]
string="American Club ,Cavanders Gold Rich Taste ,Chancellor ,Charminar Filter ,Charms Special Blue ,Classic ,Editions Trio ,Flake Special Filter ,Focus Mint  ,Gold Flake Kings ,Gold Flake Premium ,Gold Flake Premium Neo Smart ,Gold Flake Indie Mint ,Gold Flake Special ,Gold Flake Special Mint ,Gold Flake Super Star ,India King ,Marlboro KSFT ,Marlboro Advance Compact ,Marlboro Pocket Filter ,Navy Cut Fruit ,Navy Cut Virginia Filter ,Red & White Select ,Red & White Select,Regent ,Regent Black ,Regent Cool ,Silk Cut Blue ,Silk Cut Filter ,Silk Cut Virginia ,Special Blues ,Special Red Longs ,Special Red Signature ,Stellar Cool Blast  ,T3 White  ,Total Refresh ,Total Royal Twist ,Total Spearmint ,Wave Cool Mint ,Wills Navy Cut Filter ,Wills Navy Cut,American Club Mint ,American Club Smash ,American Fruit ,Benson & Hedges  ,Berkeley ,Berkely ,Blue Charms ,Blue Charms ,Bristol ,Cavander Gold  ,Chancellor ,Charminar Plains ,Charms Regular Filter ,Classic Connect ,Classic Ice Burst ,Club One ,Duke ,Editions Active Mint ,Editions Ice Fruit ,Editions Spark ,Flake Excel ,Flake Liberty ,Flake Mint Switch ,Flake Nova ,Flake White ,Gold Flake Century ,Gold Flake Filter ,Gold Flake Filter ,Gold Flake Kings ,Gold Flake Kings Lights ,Gold Flake Kings SLK ,Golden Gold Flake ,Kingston ,Marlboro Clove ,Marlboro Fuse Beyond ,NATIONAL GOLD FLAKE ,Navy Cut Deluxe Filter ,Originals ,Panama ,Panama Filter ,Panama Filter ,Player's Fruit ,Player's Mint ,Royal ,Scissors Menthol  ,Classic ,Stellar Slims Define ,Stellar Slims Shift ,Total Active Mint ,Wave Fruity ,Wave Mint ,Will Flake Premium Filter ,Zaffran ,American Club Clove Magik ,Classic AlphaTec ,Classic Double Burst ,Classic Verve ,Stellar Define Pan ,Stellar Shift Duos ,Wills Insignia "
input_string2 = string.split(',')  
# Remove leading and trailing spaces from each item
input_string2 = [item.strip() for item in input_string2]
dictionary = dict(zip(input_string1, input_string2))
df_global['Q21'] = df_global['Q21'].replace(dictionary)



df_global.reset_index(drop=True, inplace=True)
df_global['Q6'] = pd.to_numeric(df_global['Q6'], errors='coerce')
def categorize_scores(score):
    
    if 21<=score <= 25:
        return '21-25 Yrs'
    elif 26 <= score <= 30:
        return '26-30 Yrs'
    elif 31<=score <= 35:
        return '31-35 Yrs'
    elif 36<=score<=40:
        return '36-40 Yrs'
    elif 41<=score<=45:
        return '41-45 Yrs'
    elif 46<=score<=50:
        return '46-50 Yrs'
    else:
        return 'Other'
    
df_global['Age'] = df_global['Q6'].apply(categorize_scores)  


df_modified = df_global.loc[:,['Age','Q21']]
crosstab_result = pd.crosstab(df_modified['Age'], df_modified['Q21'])
count1=pd.DataFrame(crosstab_result )
count1['Total']=count1.sum(min_count=1,axis=1)


total=count1.sum()
# total.name='Total'
# count1=count1._append(total)
count1.loc['Total']=total


inside_append_dataframe_with_blank_rows(output_path, count1)






# Count6:SEC wise brands


Error_n = ['Count6:SEC wise brands']
df_name= pd.DataFrame(Error_n) 
existing_df = pd.read_excel(output_path)
startrow = existing_df.shape[0] + 4
with pd.ExcelWriter(output_path, engine='openpyxl', mode='a', if_sheet_exists='overlay') as writer:
    df_name.to_excel(writer, startrow=startrow, index=False, header=False)



df_global=df.copy()

input_string1=[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101]
string="American Club ,Cavanders Gold Rich Taste ,Chancellor ,Charminar Filter ,Charms Special Blue ,Classic ,Editions Trio ,Flake Special Filter ,Focus Mint  ,Gold Flake Kings ,Gold Flake Premium ,Gold Flake Premium Neo Smart ,Gold Flake Indie Mint ,Gold Flake Special ,Gold Flake Special Mint ,Gold Flake Super Star ,India King ,Marlboro KSFT ,Marlboro Advance Compact ,Marlboro Pocket Filter ,Navy Cut Fruit ,Navy Cut Virginia Filter ,Red & White Select ,Red & White Select,Regent ,Regent Black ,Regent Cool ,Silk Cut Blue ,Silk Cut Filter ,Silk Cut Virginia ,Special Blues ,Special Red Longs ,Special Red Signature ,Stellar Cool Blast  ,T3 White  ,Total Refresh ,Total Royal Twist ,Total Spearmint ,Wave Cool Mint ,Wills Navy Cut Filter ,Wills Navy Cut,American Club Mint ,American Club Smash ,American Fruit ,Benson & Hedges  ,Berkeley ,Berkely ,Blue Charms ,Blue Charms ,Bristol ,Cavander Gold  ,Chancellor ,Charminar Plains ,Charms Regular Filter ,Classic Connect ,Classic Ice Burst ,Club One ,Duke ,Editions Active Mint ,Editions Ice Fruit ,Editions Spark ,Flake Excel ,Flake Liberty ,Flake Mint Switch ,Flake Nova ,Flake White ,Gold Flake Century ,Gold Flake Filter ,Gold Flake Filter ,Gold Flake Kings ,Gold Flake Kings Lights ,Gold Flake Kings SLK ,Golden Gold Flake ,Kingston ,Marlboro Clove ,Marlboro Fuse Beyond ,NATIONAL GOLD FLAKE ,Navy Cut Deluxe Filter ,Originals ,Panama ,Panama Filter ,Panama Filter ,Player's Fruit ,Player's Mint ,Royal ,Scissors Menthol  ,Classic ,Stellar Slims Define ,Stellar Slims Shift ,Total Active Mint ,Wave Fruity ,Wave Mint ,Will Flake Premium Filter ,Zaffran ,American Club Clove Magik ,Classic AlphaTec ,Classic Double Burst ,Classic Verve ,Stellar Define Pan ,Stellar Shift Duos ,Wills Insignia "
input_string2 = string.split(',')  
# Remove leading and trailing spaces from each item
input_string2 = [item.strip() for item in input_string2]
dictionary = dict(zip(input_string1, input_string2))
df_global['Q21'] = df_global['Q21'].replace(dictionary)

input_string1=[1,2,3,4]
input_string2=['SEC A','SEC B','SEC C','SEC D']
dictionary = dict(zip(input_string1, input_string2))
df_global['SEC_Q'] = df_global['SEC_Q'].replace(dictionary)


df_modified = df_global.loc[:,['SEC_Q','Q21']]
crosstab_result = pd.crosstab(df_modified['SEC_Q'], df_modified['Q21'])
count1=pd.DataFrame(crosstab_result )
count1['Total']=count1.sum(min_count=1,axis=1)


total=count1.sum()
# total.name='Total'
# count1=count1._append(total)
count1.loc['Total']=total


inside_append_dataframe_with_blank_rows(output_path, count1)





# Count7:SEC wise smoking category  


Error_n = ['Count7:SEC wise smoking category ']
df_name= pd.DataFrame(Error_n) 
existing_df = pd.read_excel(output_path)
startrow = existing_df.shape[0] + 4
with pd.ExcelWriter(output_path, engine='openpyxl', mode='a', if_sheet_exists='overlay') as writer:
    df_name.to_excel(writer, startrow=startrow, index=False, header=False)



df_global=df.copy()
input_string1=[1,2,3,4]
input_string2=['SEC A','SEC B','SEC C','SEC D']
dictionary = dict(zip(input_string1, input_string2))
df_global['SEC_Q'] = df_global['SEC_Q'].replace(dictionary)
# df_s = df_global['SEC_Q'].value_counts()
# Valuecount=pd.DataFrame(df_s)
# total_sum = Valuecount.sum()
# total_sum.name = 'Total'
# Valuecount=Valuecount._append(total_sum)
# inside_append_dataframe_with_blank_rows(output_path, Valuecount)




result = df_global.groupby('SEC_Q')[['A_Q11_1', 'A_Q11_2', 'A_Q11_3','A_Q11_4','A_Q11_5','A_Q11_6','A_Q11_7','A_Q11_8','A_Q11_9']].sum()
result = result.rename(columns={
    'A_Q11_1': 'Beedi Smokers',
    'A_Q11_2': 'Cigar/Cheroot',
    'A_Q11_3': 'Cigarette',
    'A_Q11_4': 'E-cigarette',
    'A_Q11_5': 'Gutkha (Packaged or Loose) / Mawa',
    'A_Q11_6': 'Khaini (Packaged or Loose)',
    'A_Q11_7': 'Pan Masala (Sada)',
    'A_Q11_8': 'Tobacco chewing gum',
    'A_Q11_9': 'Zarda with pan'
    
})

# total=result.sum()
# total.name='Total'
# result=result._append(total)
# inside_append_dataframe_with_blank_rows(output_path, result)



# crosstab_result = pd.crosstab(df_global['SEC_Q'], result)



# dynamic_headers = [f'brands{i}' for i in range(1, len(crosstab_result.columns) + 1)]

# count1=pd.DataFrame(crosstab_result )
# count1['Total']=count1.sum(min_count=1,axis=1)


total=result.sum()
total.name='Total'
result=result._append(total)
result.loc['Total']=total


# inside_append_dataframe_with_blank_rows(output_path, df_modified)
inside_append_dataframe_with_blank_rows(output_path, result)


















# Error1: Time outside of 8:00-20:00
Error_n = ['Error1: Time outside of 8:00-20:00']
df_name= pd.DataFrame(Error_n) 
existing_df = pd.read_excel(output_path)
startrow = existing_df.shape[0] + 4
with pd.ExcelWriter(output_path, engine='openpyxl', mode='a', if_sheet_exists='overlay') as writer:
    df_name.to_excel(writer, startrow=startrow, index=False, header=False)






df_global=df.copy()
df_global['Date'] = pd.to_datetime(df_global['Date'], format='%d-%m-%Y %H:%M:%S')

# Filter rows where time is less than 08:00:00 or greater than 22:00:00
filtered_df = df_global[(df_global['Date'].dt.time < pd.to_datetime('08:00:00').time()) | (df_global['Date'].dt.time > pd.to_datetime('22:00:00').time())]
filtered_df=filtered_df[['Interviewer', 'Date']]



counts_p = filtered_df['Interviewer'].value_counts()
Valuecount=pd.DataFrame(counts_p)
total_sum = Valuecount.sum()
total_sum.name = 'Total'
Valuecount=Valuecount._append(total_sum)
inside_append_dataframe_with_blank_rows(output_path, Valuecount)












# Error2: Age vs CWE="No"

Error_n = ['Error2: Age vs CWE="No"']
df_name= pd.DataFrame(Error_n) 
existing_df = pd.read_excel(output_path)
startrow = existing_df.shape[0] + 4
with pd.ExcelWriter(output_path, engine='openpyxl', mode='a', if_sheet_exists='overlay') as writer:
    df_name.to_excel(writer, startrow=startrow, index=False, header=False)



df_global=df.copy()
df_global['Q6'] = pd.to_numeric(df_global['Q6'], errors='coerce')
def categorize_scores(score):
    
    if 21<=score <= 25:
        return '21-25 Yrs'
    elif 26 <= score <= 30:
        return '26-30 Yrs'
    elif 31<=score <= 35:
        return '31-35 Yrs'
    elif 36<=score<=40:
        return '36-40 Yrs'
    elif 41<=score<=45:
        return '41-45 Yrs'
    elif 46<=score<=50:
        return '46-50 Yrs'
    else:
        return 'Other'
    
df_global['Age'] = df_global['Q6'].apply(categorize_scores)  

input_string1=[1,2]
input_string2=['Yes','No']
dictionary = dict(zip(input_string1, input_string2))
df_global['CWE'] = df_global['Q6_1'].replace(dictionary)


df_modified = df_global.loc[:,['Interviewer','Age','CWE']]


crosstab = pd.crosstab(df_modified['Interviewer'], df_modified['Age'], values=df_modified['CWE'],aggfunc=lambda x: (x == 'No').sum(), 
    margins=True, 
    margins_name='Total')


inside_append_dataframe_with_blank_rows(output_path, crosstab)










# Error3:No. of categories coded for Q11

Error_n = [' Error3:No. of categories coded for Q11']
df_name= pd.DataFrame(Error_n) 
existing_df = pd.read_excel(output_path)
startrow = existing_df.shape[0] + 4
with pd.ExcelWriter(output_path, engine='openpyxl', mode='a', if_sheet_exists='overlay') as writer:
    df_name.to_excel(writer, startrow=startrow, index=False, header=False)



df_global=df.copy()

result = df_global.groupby('Interviewer')[['A_Q11_1', 'A_Q11_2', 'A_Q11_3','A_Q11_4','A_Q11_5','A_Q11_6','A_Q11_7','A_Q11_8','A_Q11_9']].sum()
result = result.rename(columns={
    'A_Q11_1': 'Beedi Smokers',
    'A_Q11_2': 'Cigar/Cheroot',
    'A_Q11_3': 'Cigarette',
    'A_Q11_4': 'E-cigarette',
    'A_Q11_5': 'Gutkha (Packaged or Loose) / Mawa',
    'A_Q11_6': 'Khaini (Packaged or Loose)',
    'A_Q11_7': 'Pan Masala (Sada)',
    'A_Q11_8': 'Tobacco chewing gum',
    'A_Q11_9': 'Zarda with pan'
    
})

total=result.sum()
total.name='Total'
result=result._append(total)
inside_append_dataframe_with_blank_rows(output_path, result)












# Error4:No. of sticks

Error_n = [' Error4:No. of sticks (Q11_2)']
df_name= pd.DataFrame(Error_n) 
existing_df = pd.read_excel(output_path)
startrow = existing_df.shape[0] + 4
with pd.ExcelWriter(output_path, engine='openpyxl', mode='a', if_sheet_exists='overlay') as writer:
    df_name.to_excel(writer, startrow=startrow, index=False, header=False)



df_global=df.copy()



df_modified = df_global.loc[:,['Q11_2','Interviewer']]
crosstab_result = pd.crosstab(df_modified['Interviewer'], df_modified['Q11_2'])
count1=pd.DataFrame(crosstab_result )
count1['Total']=count1.sum(min_count=1,axis=1)


total=count1.sum()
# total.name='Total'
# count1=count1._append(total)
count1.loc['Total']=total


inside_append_dataframe_with_blank_rows(output_path, count1)








# Error5: Started smoking before 15 or after 25 years age

Error_n = [' Error5: Started smoking before 15 or after 25 years age (Q12)']
df_name= pd.DataFrame(Error_n) 
existing_df = pd.read_excel(output_path)
startrow = existing_df.shape[0] + 4
with pd.ExcelWriter(output_path, engine='openpyxl', mode='a', if_sheet_exists='overlay') as writer:
    df_name.to_excel(writer, startrow=startrow, index=False, header=False)



df_global=df.copy()
df_global['Q12'] = pd.to_numeric(df_global['Q12'], errors='coerce')


# Filter rows where column 'A' is less than 5 or greater than 20
filtered_df = df_global[(df_global['Q12'] < 15) | (df_global['Q12'] > 25)]

# Select columns 'A', 'B', and 'C'
result_df = filtered_df[['Interviewer', 'Respondent_id', 'Q12']]


result_df.rename(columns={
    'Q12': 'Smoking age',
    'Respondent_id': 'Respondent',
    'Interviewer': 'Interviewer'
    }, inplace=True)


# filt = ((df_global['Q12']>25) & (df_global['Q12']<15))

                                              
df_s = result_df['Interviewer'].value_counts()

Valuecount=pd.DataFrame(df_s)
total_sum = Valuecount.sum()
total_sum.name = 'Total'
Valuecount=Valuecount._append(total_sum)
# inside_append_dataframe_with_blank_rows(output_path, df_modified)
inside_append_dataframe_with_blank_rows(output_path, Valuecount)
inside_append_dataframe_with_blank_rows(output_path, result_df)











# Error6:frequency of number of brands selected  by each interviewer in spontaneous awareness(Q14)

Error_n = [' Error6:frequency of number of brands selected  by each interviewer in spontaneous awareness(Q14)']
df_name= pd.DataFrame(Error_n) 
existing_df = pd.read_excel(output_path)
startrow = existing_df.shape[0] + 4
with pd.ExcelWriter(output_path, engine='openpyxl', mode='a', if_sheet_exists='overlay') as writer:
    df_name.to_excel(writer, startrow=startrow, index=False, header=False)



df_global=df.copy()


string="A_Q14_1_1,A_Q14_1_2,A_Q14_1_3,A_Q14_1_4,A_Q14_1_5,A_Q14_1_6,A_Q14_1_7,A_Q14_1_8,A_Q14_1_9,A_Q14_1_10,A_Q14_1_11,A_Q14_1_12,A_Q14_1_13,A_Q14_1_14,A_Q14_1_15,A_Q14_1_16,A_Q14_1_17,A_Q14_1_18,A_Q14_1_19,A_Q14_1_20,A_Q14_1_21,A_Q14_1_22,A_Q14_1_23,A_Q14_1_24,A_Q14_1_25,A_Q14_1_26,A_Q14_1_27,A_Q14_1_28,A_Q14_1_29,A_Q14_1_30,A_Q14_1_31,A_Q14_1_32,A_Q14_1_33,A_Q14_1_34,A_Q14_1_35,A_Q14_1_36,A_Q14_1_37,A_Q14_1_38,A_Q14_1_39,A_Q14_1_40,A_Q14_1_41,A_Q14_1_42,A_Q14_1_43,A_Q14_1_44,A_Q14_1_45,A_Q14_1_46,A_Q14_1_47,A_Q14_1_48,A_Q14_1_49,A_Q14_1_50,A_Q14_1_51,A_Q14_1_52,A_Q14_1_53,A_Q14_1_54,A_Q14_1_55,A_Q14_1_56,A_Q14_1_57,A_Q14_1_58,A_Q14_1_59,A_Q14_1_60,A_Q14_1_61,A_Q14_1_62,A_Q14_1_63,A_Q14_1_64,A_Q14_1_65,A_Q14_1_66,A_Q14_1_67,A_Q14_1_68,A_Q14_1_69,A_Q14_1_70,A_Q14_1_71,A_Q14_1_72,A_Q14_1_73,A_Q14_1_74,A_Q14_1_75,A_Q14_1_76,A_Q14_1_77,A_Q14_1_78,A_Q14_1_79,A_Q14_1_80,A_Q14_1_81,A_Q14_1_82,A_Q14_1_83,A_Q14_1_84,A_Q14_1_85,A_Q14_1_86,A_Q14_1_87,A_Q14_1_88,A_Q14_1_89,A_Q14_1_90,A_Q14_1_91,A_Q14_1_92,A_Q14_1_93,A_Q14_1_94,A_Q14_1_95,A_Q14_1_96,A_Q14_1_97,A_Q14_1_98,A_Q14_1_99,A_Q14_1_100,A_Q14_1_101"
input_string2 = string.split(',')  
# Remove leading and trailing spaces from each item
input_string2 = [item.strip() for item in input_string2]
df_global['sum_columns'] = df_global[input_string2].sum(axis=1)
df_modified = df_global.loc[:,['Respondent_id','Interviewer','sum_columns']]

crosstab_result = pd.crosstab(df_modified['Interviewer'], df_modified['sum_columns'])



# dynamic_headers = [f'brands{i}' for i in range(1, len(crosstab_result.columns) + 1)]

count1=pd.DataFrame(crosstab_result )
count1['Total']=count1.sum(min_count=1,axis=1)


total=count1.sum()
# total.name='Total'
# count1=count1._append(total)
count1.loc['Total']=total


inside_append_dataframe_with_blank_rows(output_path, count1)














# Error7:Regular brand not in TOM

Error_n = [' Error7:Regular brand not in TOM']
df_name= pd.DataFrame(Error_n) 
existing_df = pd.read_excel(output_path)
startrow = existing_df.shape[0] + 4
with pd.ExcelWriter(output_path, engine='openpyxl', mode='a', if_sheet_exists='overlay') as writer:
    df_name.to_excel(writer, startrow=startrow, index=False, header=False)



df_global=df.copy()

filt = (df_global['Q14'] != df_global['Q21']) 

nom = df_global.loc[filt,['Respondent_id','Interviewer','Q14','Q21']]
df_modified = nom                                         
df_s = df_modified['Interviewer'].value_counts()

Valuecount=pd.DataFrame(df_s)
total_sum = Valuecount.sum()
total_sum.name = 'Total'
Valuecount=Valuecount._append(total_sum)
inside_append_dataframe_with_blank_rows(output_path, df_modified)
inside_append_dataframe_with_blank_rows(output_path, Valuecount)










# Error8:Regular brand not in TOM  or spont

Error_n = [' Error8:Regular brand not in TOM  or spont']
df_name= pd.DataFrame(Error_n) 
existing_df = pd.read_excel(output_path)
startrow = existing_df.shape[0] + 4
with pd.ExcelWriter(output_path, engine='openpyxl', mode='a', if_sheet_exists='overlay') as writer:
    df_name.to_excel(writer, startrow=startrow, index=False, header=False)



df_global=df.copy()
df_global.reset_index(drop=True, inplace=True)

# input_string1=[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101]
# string="A_Q14_1_1,A_Q14_1_2,A_Q14_1_3,A_Q14_1_4,A_Q14_1_5,A_Q14_1_6,A_Q14_1_7,A_Q14_1_8,A_Q14_1_9,A_Q14_1_10,A_Q14_1_11,A_Q14_1_12,A_Q14_1_13,A_Q14_1_14,A_Q14_1_15,A_Q14_1_16,A_Q14_1_17,A_Q14_1_18,A_Q14_1_19,A_Q14_1_20,A_Q14_1_21,A_Q14_1_22,A_Q14_1_23,A_Q14_1_24,A_Q14_1_25,A_Q14_1_26,A_Q14_1_27,A_Q14_1_28,A_Q14_1_29,A_Q14_1_30,A_Q14_1_31,A_Q14_1_32,A_Q14_1_33,A_Q14_1_34,A_Q14_1_35,A_Q14_1_36,A_Q14_1_37,A_Q14_1_38,A_Q14_1_39,A_Q14_1_40,A_Q14_1_41,A_Q14_1_42,A_Q14_1_43,A_Q14_1_44,A_Q14_1_45,A_Q14_1_46,A_Q14_1_47,A_Q14_1_48,A_Q14_1_49,A_Q14_1_50,A_Q14_1_51,A_Q14_1_52,A_Q14_1_53,A_Q14_1_54,A_Q14_1_55,A_Q14_1_56,A_Q14_1_57,A_Q14_1_58,A_Q14_1_59,A_Q14_1_60,A_Q14_1_61,A_Q14_1_62,A_Q14_1_63,A_Q14_1_64,A_Q14_1_65,A_Q14_1_66,A_Q14_1_67,A_Q14_1_68,A_Q14_1_69,A_Q14_1_70,A_Q14_1_71,A_Q14_1_72,A_Q14_1_73,A_Q14_1_74,A_Q14_1_75,A_Q14_1_76,A_Q14_1_77,A_Q14_1_78,A_Q14_1_79,A_Q14_1_80,A_Q14_1_81,A_Q14_1_82,A_Q14_1_83,A_Q14_1_84,A_Q14_1_85,A_Q14_1_86,A_Q14_1_87,A_Q14_1_88,A_Q14_1_89,A_Q14_1_90,A_Q14_1_91,A_Q14_1_92,A_Q14_1_93,A_Q14_1_94,A_Q14_1_95,A_Q14_1_96,A_Q14_1_97,A_Q14_1_98,A_Q14_1_99,A_Q14_1_100,A_Q14_1_101"
# input_string2 = string.split(',')  
# # Remove leading and trailing spaces from each item
# input_string2 = [item.strip() for item in input_string2]
# dictionary = dict(zip(input_string1, input_string2))



df_dictformation = pd.read_excel(r'D:\Input\Cigarette\Brand Health Study(October 2024)\Input\Data input\BHS 22-Oct-24_DataMap.xlsx','Regularnotintomspont')
dictionary = dict(zip(df_dictformation['Column'], df_dictformation['Brand']))

# df_global.reset_index(drop=True, inplace=True)









for df_row in range(len(df_global)):
        if (df_global.loc[df_row,dictionary[df_global.loc[df_row,'Q21']]]== 1  or  df_global.loc[df_row,'Q14']==df_global.loc[df_row,'Q21']):
            df_global.drop(df_row,inplace=True)
        else:
             pass
         

additional_columns = ['Respondent_id', 'Name','Interviewer','Q14','Q21']

# Combine the lists
all_columns = additional_columns+list(dictionary.values())


df_modified = df_global.loc[:,all_columns]




                                                  
df_s = df_modified['Interviewer'].value_counts()

Valuecount=pd.DataFrame(df_s)
total_sum = Valuecount.sum()
total_sum.name = 'Total'
Valuecount=Valuecount._append(total_sum)
inside_append_dataframe_with_blank_rows(output_path, df_modified)
inside_append_dataframe_with_blank_rows(output_path, Valuecount)







# Error9: Frequency of number of brands selected  by each interviewer in aided awareness(Q15)

Error_n = ['Error9: Frequency of number of brands selected  by each interviewer in aided awareness(Q15)']
df_name= pd.DataFrame(Error_n) 
existing_df = pd.read_excel(output_path)
startrow = existing_df.shape[0] + 4
with pd.ExcelWriter(output_path, engine='openpyxl', mode='a', if_sheet_exists='overlay') as writer:
    df_name.to_excel(writer, startrow=startrow, index=False, header=False)



df_global=df.copy()
df_global['sum_columns'] = df_global[['A_Q15_1','A_Q15_2','A_Q15_3','A_Q15_4','A_Q15_5','A_Q15_6','A_Q15_7','A_Q15_8','A_Q15_9','A_Q15_10','A_Q15_11','A_Q15_12','A_Q15_13','A_Q15_14','A_Q15_15','A_Q15_16','A_Q15_17','A_Q15_18','A_Q15_19','A_Q15_20','A_Q15_21','A_Q15_22','A_Q15_23','A_Q15_24','A_Q15_25','A_Q15_26','A_Q15_27','A_Q15_28','A_Q15_29','A_Q15_30','A_Q15_31','A_Q15_32','A_Q15_33','A_Q15_34','A_Q15_35','A_Q15_36','A_Q15_37','A_Q15_38','A_Q15_39','A_Q15_40','A_Q15_41','A_Q15_42','A_Q15_43','A_Q15_44','A_Q15_45','A_Q15_46','A_Q15_47','A_Q15_48','A_Q15_49','A_Q15_50','A_Q15_51','A_Q15_52','A_Q15_53','A_Q15_54','A_Q15_55','A_Q15_56','A_Q15_57','A_Q15_58','A_Q15_59','A_Q15_60','A_Q15_61','A_Q15_62','A_Q15_63','A_Q15_64','A_Q15_65','A_Q15_66','A_Q15_67','A_Q15_68','A_Q15_69','A_Q15_70','A_Q15_71','A_Q15_72','A_Q15_73','A_Q15_74','A_Q15_75','A_Q15_76','A_Q15_77','A_Q15_78','A_Q15_79','A_Q15_80','A_Q15_81','A_Q15_82','A_Q15_83','A_Q15_84','A_Q15_85','A_Q15_86','A_Q15_87','A_Q15_88','A_Q15_89','A_Q15_90','A_Q15_91','A_Q15_92','A_Q15_93','A_Q15_94','A_Q15_95','A_Q15_96','A_Q15_97','A_Q15_98','A_Q15_99','A_Q15_100','A_Q15_101']].sum(axis=1)
df_modified = df_global.loc[:,['Respondent_id','Interviewer','sum_columns']]

crosstab_result = pd.crosstab(df_modified['Interviewer'], df_modified['sum_columns'])
crosstab_result['Total']=crosstab_result.sum(min_count=1,axis=1)
total=crosstab_result.sum()
total.name='Total'
crosstab_result=crosstab_result._append(total)
count1=pd.DataFrame(crosstab_result )
# inside_append_dataframe_with_blank_rows(output_path, df_modified)
inside_append_dataframe_with_blank_rows(output_path, count1)













# Error10: Frequency of number of brands selected  by each interviewer in ever smoked(Q16)

Error_n = ['Error10: Frequency of number of brands selected  by each interviewer in ever smoked(Q16)']
df_name= pd.DataFrame(Error_n) 
existing_df = pd.read_excel(output_path)
startrow = existing_df.shape[0] + 4
with pd.ExcelWriter(output_path, engine='openpyxl', mode='a', if_sheet_exists='overlay') as writer:
    df_name.to_excel(writer, startrow=startrow, index=False, header=False)



df_global=df.copy()
df_global['sum_columns'] = df_global[['A_Q16_1','A_Q16_2','A_Q16_3','A_Q16_4','A_Q16_5','A_Q16_6','A_Q16_7','A_Q16_8','A_Q16_9','A_Q16_10','A_Q16_11','A_Q16_12','A_Q16_13','A_Q16_14','A_Q16_15','A_Q16_16','A_Q16_17','A_Q16_18','A_Q16_19','A_Q16_20','A_Q16_21','A_Q16_22','A_Q16_23','A_Q16_24','A_Q16_25','A_Q16_26','A_Q16_27','A_Q16_28','A_Q16_29','A_Q16_30','A_Q16_31','A_Q16_32','A_Q16_33','A_Q16_34','A_Q16_35','A_Q16_36','A_Q16_37','A_Q16_38','A_Q16_39','A_Q16_40','A_Q16_41','A_Q16_42','A_Q16_43','A_Q16_44','A_Q16_45','A_Q16_46','A_Q16_47','A_Q16_48','A_Q16_49','A_Q16_50','A_Q16_51','A_Q16_52','A_Q16_53','A_Q16_54','A_Q16_55','A_Q16_56','A_Q16_57','A_Q16_58','A_Q16_59','A_Q16_60','A_Q16_61','A_Q16_62','A_Q16_63','A_Q16_64','A_Q16_65','A_Q16_66','A_Q16_67','A_Q16_68','A_Q16_69','A_Q16_70','A_Q16_71','A_Q16_72','A_Q16_73','A_Q16_74','A_Q16_75','A_Q16_76','A_Q16_77','A_Q16_78','A_Q16_79','A_Q16_80','A_Q16_81','A_Q16_82','A_Q16_83','A_Q16_84','A_Q16_85','A_Q16_86','A_Q16_87','A_Q16_88','A_Q16_89','A_Q16_90','A_Q16_91','A_Q16_92','A_Q16_93','A_Q16_94','A_Q16_95','A_Q16_96','A_Q16_97','A_Q16_98','A_Q16_99','A_Q16_100','A_Q16_101']].sum(axis=1)


df_modified = df_global.loc[:,['Respondent_id','Interviewer','sum_columns']]

crosstab_result = pd.crosstab(df_modified['Interviewer'], df_modified['sum_columns'])
crosstab_result['Total']=crosstab_result.sum(min_count=1,axis=1)
total=crosstab_result.sum()
total.name='Total'
crosstab_result=crosstab_result._append(total)
count1=pd.DataFrame(crosstab_result )
inside_append_dataframe_with_blank_rows(output_path, df_modified)
inside_append_dataframe_with_blank_rows(output_path, count1)







# Error11: Frequency of number of brands selected  by each interviewer in ever smoked in last 2 years (Q17)

Error_n = ['Error11: Frequency of number of brands selected  by each interviewer in ever smoked in last 2 years (Q17)']
df_name= pd.DataFrame(Error_n) 
existing_df = pd.read_excel(output_path)
startrow = existing_df.shape[0] + 4
with pd.ExcelWriter(output_path, engine='openpyxl', mode='a', if_sheet_exists='overlay') as writer:
    df_name.to_excel(writer, startrow=startrow, index=False, header=False)



df_global=df.copy()
string="A_Q17_1,A_Q17_2,A_Q17_3,A_Q17_4,A_Q17_5,A_Q17_6,A_Q17_7,A_Q17_8,A_Q17_9,A_Q17_10,A_Q17_11,A_Q17_12,A_Q17_13,A_Q17_14,A_Q17_15,A_Q17_16,A_Q17_17,A_Q17_18,A_Q17_19,A_Q17_20,A_Q17_21,A_Q17_22,A_Q17_23,A_Q17_24,A_Q17_25,A_Q17_26,A_Q17_27,A_Q17_28,A_Q17_29,A_Q17_30,A_Q17_31,A_Q17_32,A_Q17_33,A_Q17_34,A_Q17_35,A_Q17_36,A_Q17_37,A_Q17_38,A_Q17_39,A_Q17_40,A_Q17_41,A_Q17_42,A_Q17_43,A_Q17_44,A_Q17_45,A_Q17_46,A_Q17_47,A_Q17_48,A_Q17_49,A_Q17_50,A_Q17_51,A_Q17_52,A_Q17_53,A_Q17_54,A_Q17_55,A_Q17_56,A_Q17_57,A_Q17_58,A_Q17_59,A_Q17_60,A_Q17_61,A_Q17_62,A_Q17_63,A_Q17_64,A_Q17_65,A_Q17_66,A_Q17_67,A_Q17_68,A_Q17_69,A_Q17_70,A_Q17_71,A_Q17_72,A_Q17_73,A_Q17_74,A_Q17_75,A_Q17_76,A_Q17_77,A_Q17_78,A_Q17_79,A_Q17_80,A_Q17_81,A_Q17_82,A_Q17_83,A_Q17_84,A_Q17_85,A_Q17_86,A_Q17_87,A_Q17_88,A_Q17_89,A_Q17_90,A_Q17_91,A_Q17_92,A_Q17_93,A_Q17_94,A_Q17_95,A_Q17_96,A_Q17_97,A_Q17_98,A_Q17_99,A_Q17_100,A_Q17_101"
input_string2 = string.split(',')  
# Remove leading and trailing spaces from each item
input_string2 = [item.strip() for item in input_string2]
df_global['sum_columns'] = df_global[input_string2].sum(axis=1)
df_modified = df_global.loc[:,['Respondent_id','Interviewer','sum_columns']]

crosstab_result = pd.crosstab(df_modified['Interviewer'], df_modified['sum_columns'])



# dynamic_headers = [f'brands{i}' for i in range(1, len(crosstab_result.columns) + 1)]

count1=pd.DataFrame(crosstab_result )
count1['Total']=count1.sum(min_count=1,axis=1)


total=count1.sum()
# total.name='Total'
# count1=count1._append(total)
count1.loc['Total']=total


# inside_append_dataframe_with_blank_rows(output_path, df_modified)
inside_append_dataframe_with_blank_rows(output_path, count1)













# Error12: Frequency of number of brands selected  by each interviewer in ever smoked in last 1 year (Q18)

Error_n = ['Error12: Frequency of number of brands selected  by each interviewer in ever smoked in last 1 year (Q18)']
df_name= pd.DataFrame(Error_n) 
existing_df = pd.read_excel(output_path)
startrow = existing_df.shape[0] + 4
with pd.ExcelWriter(output_path, engine='openpyxl', mode='a', if_sheet_exists='overlay') as writer:
    df_name.to_excel(writer, startrow=startrow, index=False, header=False)



df_global=df.copy()
string="A_Q18_1,A_Q18_2,A_Q18_3,A_Q18_4,A_Q18_5,A_Q18_6,A_Q18_7,A_Q18_8,A_Q18_9,A_Q18_10,A_Q18_11,A_Q18_12,A_Q18_13,A_Q18_14,A_Q18_15,A_Q18_16,A_Q18_17,A_Q18_18,A_Q18_19,A_Q18_20,A_Q18_21,A_Q18_22,A_Q18_23,A_Q18_24,A_Q18_25,A_Q18_26,A_Q18_27,A_Q18_28,A_Q18_29,A_Q18_30,A_Q18_31,A_Q18_32,A_Q18_33,A_Q18_34,A_Q18_35,A_Q18_36,A_Q18_37,A_Q18_38,A_Q18_39,A_Q18_40,A_Q18_41,A_Q18_42,A_Q18_43,A_Q18_44,A_Q18_45,A_Q18_46,A_Q18_47,A_Q18_48,A_Q18_49,A_Q18_50,A_Q18_51,A_Q18_52,A_Q18_53,A_Q18_54,A_Q18_55,A_Q18_56,A_Q18_57,A_Q18_58,A_Q18_59,A_Q18_60,A_Q18_61,A_Q18_62,A_Q18_63,A_Q18_64,A_Q18_65,A_Q18_66,A_Q18_67,A_Q18_68,A_Q18_69,A_Q18_70,A_Q18_71,A_Q18_72,A_Q18_73,A_Q18_74,A_Q18_75,A_Q18_76,A_Q18_77,A_Q18_78,A_Q18_79,A_Q18_80,A_Q18_81,A_Q18_82,A_Q18_83,A_Q18_84,A_Q18_85,A_Q18_86,A_Q18_87,A_Q18_88,A_Q18_89,A_Q18_90,A_Q18_91,A_Q18_92,A_Q18_93,A_Q18_94,A_Q18_95,A_Q18_96,A_Q18_97,A_Q18_98,A_Q18_99,A_Q18_100,A_Q18_101"
input_string2 = string.split(',')  
# Remove leading and trailing spaces from each item
input_string2 = [item.strip() for item in input_string2]
df_global['sum_columns'] = df_global[input_string2].sum(axis=1)
df_modified = df_global.loc[:,['Respondent_id','Interviewer','sum_columns']]

crosstab_result = pd.crosstab(df_modified['Interviewer'], df_modified['sum_columns'])



# dynamic_headers = [f'brands{i}' for i in range(1, len(crosstab_result.columns) + 1)]

count1=pd.DataFrame(crosstab_result )
count1['Total']=count1.sum(min_count=1,axis=1)


total=count1.sum()
# total.name='Total'
# count1=count1._append(total)
count1.loc['Total']=total


# inside_append_dataframe_with_blank_rows(output_path, df_modified)
inside_append_dataframe_with_blank_rows(output_path, count1)


















# Error13: Frequency of number of brands selected  by each interviewer in ever smoked in last 1 month (Q19)

Error_n = ['Error13: Frequency of number of brands selected  by each interviewer in ever smoked in last 1 month (Q19)']
df_name= pd.DataFrame(Error_n) 
existing_df = pd.read_excel(output_path)
startrow = existing_df.shape[0] + 4
with pd.ExcelWriter(output_path, engine='openpyxl', mode='a', if_sheet_exists='overlay') as writer:
    df_name.to_excel(writer, startrow=startrow, index=False, header=False)



df_global=df.copy()
string="A_Q19_1,A_Q19_2,A_Q19_3,A_Q19_4,A_Q19_5,A_Q19_6,A_Q19_7,A_Q19_8,A_Q19_9,A_Q19_10,A_Q19_11,A_Q19_12,A_Q19_13,A_Q19_14,A_Q19_15,A_Q19_16,A_Q19_17,A_Q19_18,A_Q19_19,A_Q19_20,A_Q19_21,A_Q19_22,A_Q19_23,A_Q19_24,A_Q19_25,A_Q19_26,A_Q19_27,A_Q19_28,A_Q19_29,A_Q19_30,A_Q19_31,A_Q19_32,A_Q19_33,A_Q19_34,A_Q19_35,A_Q19_36,A_Q19_37,A_Q19_38,A_Q19_39,A_Q19_40,A_Q19_41,A_Q19_42,A_Q19_43,A_Q19_44,A_Q19_45,A_Q19_46,A_Q19_47,A_Q19_48,A_Q19_49,A_Q19_50,A_Q19_51,A_Q19_52,A_Q19_53,A_Q19_54,A_Q19_55,A_Q19_56,A_Q19_57,A_Q19_58,A_Q19_59,A_Q19_60,A_Q19_61,A_Q19_62,A_Q19_63,A_Q19_64,A_Q19_65,A_Q19_66,A_Q19_67,A_Q19_68,A_Q19_69,A_Q19_70,A_Q19_71,A_Q19_72,A_Q19_73,A_Q19_74,A_Q19_75,A_Q19_76,A_Q19_77,A_Q19_78,A_Q19_79,A_Q19_80,A_Q19_81,A_Q19_82,A_Q19_83,A_Q19_84,A_Q19_85,A_Q19_86,A_Q19_87,A_Q19_88,A_Q19_89,A_Q19_90,A_Q19_91,A_Q19_92,A_Q19_93,A_Q19_94,A_Q19_95,A_Q19_96,A_Q19_97,A_Q19_98,A_Q19_99,A_Q19_100,A_Q19_101"
input_string2 = string.split(',')  
# Remove leading and trailing spaces from each item
input_string2 = [item.strip() for item in input_string2]
df_global['sum_columns'] = df_global[input_string2].sum(axis=1)
df_modified = df_global.loc[:,['Respondent_id','Interviewer','sum_columns']]

crosstab_result = pd.crosstab(df_modified['Interviewer'], df_modified['sum_columns'])



# dynamic_headers = [f'brands{i}' for i in range(1, len(crosstab_result.columns) + 1)]

count1=pd.DataFrame(crosstab_result )
count1['Total']=count1.sum(min_count=1,axis=1)


total=count1.sum()
# total.name='Total'
# count1=count1._append(total)
count1.loc['Total']=total


# inside_append_dataframe_with_blank_rows(output_path, df_modified)
inside_append_dataframe_with_blank_rows(output_path, count1)

















# Error14 Frequency of number of brands selected  by each interviewer in ever smoked in last 2 weeks(Q20.1)

Error_n = ['Error14 Frequency of number of brands selected  by each interviewer in ever smoked in last 2 weeks(Q20.1)']
df_name= pd.DataFrame(Error_n) 
existing_df = pd.read_excel(output_path)
startrow = existing_df.shape[0] + 4
with pd.ExcelWriter(output_path, engine='openpyxl', mode='a', if_sheet_exists='overlay') as writer:
    df_name.to_excel(writer, startrow=startrow, index=False, header=False)



df_global=df.copy()
string="A_Q20_1_1,A_Q20_1_2,A_Q20_1_3,A_Q20_1_4,A_Q20_1_5,A_Q20_1_6,A_Q20_1_7,A_Q20_1_8,A_Q20_1_9,A_Q20_1_10,A_Q20_1_11,A_Q20_1_12,A_Q20_1_13,A_Q20_1_14,A_Q20_1_15,A_Q20_1_16,A_Q20_1_17,A_Q20_1_18,A_Q20_1_19,A_Q20_1_20,A_Q20_1_21,A_Q20_1_22,A_Q20_1_23,A_Q20_1_24,A_Q20_1_25,A_Q20_1_26,A_Q20_1_27,A_Q20_1_28,A_Q20_1_29,A_Q20_1_30,A_Q20_1_31,A_Q20_1_32,A_Q20_1_33,A_Q20_1_34,A_Q20_1_35,A_Q20_1_36,A_Q20_1_37,A_Q20_1_38,A_Q20_1_39,A_Q20_1_40,A_Q20_1_41,A_Q20_1_42,A_Q20_1_43,A_Q20_1_44,A_Q20_1_45,A_Q20_1_46,A_Q20_1_47,A_Q20_1_48,A_Q20_1_49,A_Q20_1_50,A_Q20_1_51,A_Q20_1_52,A_Q20_1_53,A_Q20_1_54,A_Q20_1_55,A_Q20_1_56,A_Q20_1_57,A_Q20_1_58,A_Q20_1_59,A_Q20_1_60,A_Q20_1_61,A_Q20_1_62,A_Q20_1_63,A_Q20_1_64,A_Q20_1_65,A_Q20_1_66,A_Q20_1_67,A_Q20_1_68,A_Q20_1_69,A_Q20_1_70,A_Q20_1_71,A_Q20_1_72,A_Q20_1_73,A_Q20_1_74,A_Q20_1_75,A_Q20_1_76,A_Q20_1_77,A_Q20_1_78,A_Q20_1_79,A_Q20_1_80,A_Q20_1_81,A_Q20_1_82,A_Q20_1_83,A_Q20_1_84,A_Q20_1_85,A_Q20_1_86,A_Q20_1_87,A_Q20_1_88,A_Q20_1_89,A_Q20_1_90,A_Q20_1_91,A_Q20_1_92,A_Q20_1_93,A_Q20_1_94,A_Q20_1_95,A_Q20_1_96,A_Q20_1_97,A_Q20_1_98,A_Q20_1_99,A_Q20_1_100,A_Q20_1_101"
input_string2 = string.split(',')  
# Remove leading and trailing spaces from each item
input_string2 = [item.strip() for item in input_string2]
df_global['sum_columns'] = df_global[input_string2].sum(axis=1)
df_modified = df_global.loc[:,['Respondent_id','Interviewer','sum_columns']]

crosstab_result = pd.crosstab(df_modified['Interviewer'], df_modified['sum_columns'])



# dynamic_headers = [f'brands{i}' for i in range(1, len(crosstab_result.columns) + 1)]

count1=pd.DataFrame(crosstab_result )
count1['Total']=count1.sum(min_count=1,axis=1)


total=count1.sum()
# total.name='Total'
# count1=count1._append(total)
count1.loc['Total']=total


# inside_append_dataframe_with_blank_rows(output_path, df_modified)
inside_append_dataframe_with_blank_rows(output_path, count1)














# Error15: Frequency of number of brands selected  by each interviewer in ever smoked in last 1 week(Q20)

Error_n = ['Error15: Frequency of number of brands selected  by each interviewer in ever smoked in last 1 week(Q20)']
df_name= pd.DataFrame(Error_n) 
existing_df = pd.read_excel(output_path)
startrow = existing_df.shape[0] + 4
with pd.ExcelWriter(output_path, engine='openpyxl', mode='a', if_sheet_exists='overlay') as writer:
    df_name.to_excel(writer, startrow=startrow, index=False, header=False)



df_global=df.copy()
string="A_Q20_1,A_Q20_2,A_Q20_3,A_Q20_4,A_Q20_5,A_Q20_6,A_Q20_7,A_Q20_8,A_Q20_9,A_Q20_10,A_Q20_11,A_Q20_12,A_Q20_13,A_Q20_14,A_Q20_15,A_Q20_16,A_Q20_17,A_Q20_18,A_Q20_19,A_Q20_20,A_Q20_21,A_Q20_22,A_Q20_23,A_Q20_24,A_Q20_25,A_Q20_26,A_Q20_27,A_Q20_28,A_Q20_29,A_Q20_30,A_Q20_31,A_Q20_32,A_Q20_33,A_Q20_34,A_Q20_35,A_Q20_36,A_Q20_37,A_Q20_38,A_Q20_39,A_Q20_40,A_Q20_41,A_Q20_42,A_Q20_43,A_Q20_44,A_Q20_45,A_Q20_46,A_Q20_47,A_Q20_48,A_Q20_49,A_Q20_50,A_Q20_51,A_Q20_52,A_Q20_53,A_Q20_54,A_Q20_55,A_Q20_56,A_Q20_57,A_Q20_58,A_Q20_59,A_Q20_60,A_Q20_61,A_Q20_62,A_Q20_63,A_Q20_64,A_Q20_65,A_Q20_66,A_Q20_67,A_Q20_68,A_Q20_69,A_Q20_70,A_Q20_71,A_Q20_72,A_Q20_73,A_Q20_74,A_Q20_75,A_Q20_76,A_Q20_77,A_Q20_78,A_Q20_79,A_Q20_80,A_Q20_81,A_Q20_82,A_Q20_83,A_Q20_84,A_Q20_85,A_Q20_86,A_Q20_87,A_Q20_88,A_Q20_89,A_Q20_90,A_Q20_91,A_Q20_92,A_Q20_93,A_Q20_94,A_Q20_95,A_Q20_96,A_Q20_97,A_Q20_98,A_Q20_99,A_Q20_100,A_Q20_101"
input_string2 = string.split(',')  
# Remove leading and trailing spaces from each item
input_string2 = [item.strip() for item in input_string2]
df_global['sum_columns'] = df_global[input_string2].sum(axis=1)
df_modified = df_global.loc[:,['Respondent_id','Interviewer','sum_columns']]

crosstab_result = pd.crosstab(df_modified['Interviewer'], df_modified['sum_columns'])



# dynamic_headers = [f'brands{i}' for i in range(1, len(crosstab_result.columns) + 1)]

count1=pd.DataFrame(crosstab_result )
count1['Total']=count1.sum(min_count=1,axis=1)


total=count1.sum()
# total.name='Total'
# count1=count1._append(total)
count1.loc['Total']=total


# inside_append_dataframe_with_blank_rows(output_path, df_modified)
inside_append_dataframe_with_blank_rows(output_path, count1)














# Error16: No. of sticksof regular brand (Q23)

Error_n = [' Error16: No. of sticks of regular brand (Q23)']
df_name= pd.DataFrame(Error_n) 
existing_df = pd.read_excel(output_path)
startrow = existing_df.shape[0] + 4
with pd.ExcelWriter(output_path, engine='openpyxl', mode='a', if_sheet_exists='overlay') as writer:
    df_name.to_excel(writer, startrow=startrow, index=False, header=False)



df_global=df.copy()



df_modified = df_global.loc[:,['Q23','Interviewer']]
crosstab_result = pd.crosstab(df_modified['Interviewer'], df_modified['Q23'])
count1=pd.DataFrame(crosstab_result )
count1['Total']=count1.sum(min_count=1,axis=1)


total=count1.sum()
# total.name='Total'
# count1=count1._append(total)
count1.loc['Total']=total


inside_append_dataframe_with_blank_rows(output_path, count1)












# Error17: Difference between avg sticks smoked/day & regular brand stick smoked/day

Error_n = [' Error17: Difference between avg sticks smoked/day & regular brand stick smoked/day']
df_name= pd.DataFrame(Error_n) 
existing_df = pd.read_excel(output_path)
startrow = existing_df.shape[0] + 4
with pd.ExcelWriter(output_path, engine='openpyxl', mode='a', if_sheet_exists='overlay') as writer:
    df_name.to_excel(writer, startrow=startrow, index=False, header=False)



df_global=df.copy()


df_global['Difference'] = df_global['Q11_2'] - df_global['Q23']
df_modified = df_global.loc[:,['Difference','Interviewer']]
crosstab_result = pd.crosstab(df_modified['Interviewer'], df_modified['Difference'])
count1=pd.DataFrame(crosstab_result )
count1['Total']=count1.sum(min_count=1,axis=1)


total=count1.sum()
# total.name='Total'
# count1=count1._append(total)
count1.loc['Total']=total


inside_append_dataframe_with_blank_rows(output_path, count1)










# Error18: Price fluctuation between Previous  & regular brand 

Error_n = ['Error18: Price fluctuation between Previous  & regular brand ']
df_name= pd.DataFrame(Error_n) 
existing_df = pd.read_excel(output_path)
startrow = existing_df.shape[0] + 4
with pd.ExcelWriter(output_path, engine='openpyxl', mode='a', if_sheet_exists='overlay') as writer:
    df_name.to_excel(writer, startrow=startrow, index=False, header=False)



df_global=df.copy()


df_global = df_global.dropna(subset=['Q24'])
df_global = df_global[df_global['Q24'] != -1]

df_global.reset_index(drop=True, inplace=True)

df_dictformation = pd.read_excel(r'D:\Input\Cigarette\Brand Health Study(October 2024)\Input\Data input\BHS 22-Oct-24_DataMap.xlsx','Price')
dictionary = dict(zip(df_dictformation['Column'], df_dictformation['Brand']))




for df_row in range (len(df_global)):
   
    if (dictionary[df_global.loc[df_row,'Q21']])-(dictionary[df_global.loc[df_row,'Q24']])<=2 and (dictionary[df_global.loc[df_row,'Q21']])-(dictionary[df_global.loc[df_row,'Q24']])>=-2:
    
        df_global.drop(df_row,inplace=True)
        # print(df_global.loc[:,['Q21','Q24','Q27']])
    else:
        pass
    
    
df_modified = df_global.loc[:,['Interviewer','Q21','Q24']]


df_dictformation = pd.read_excel(r'D:\Input\Cigarette\Brand Health Study(October 2024)\Input\Data input\BHS 22-Oct-24_DataMap.xlsx','MOUB')



# Join two columns into a dictionary
# Assuming 'Column1' and 'Column2' are the names of the columns you want to join
dict_format = dict(zip(df_dictformation['Column'], df_dictformation['Brand']))


df_modified['Q21'] = df_modified['Q21'].replace(dict_format)
df_modified['Q24'] = df_modified['Q24'].replace(dict_format)

    

df_s = df_modified['Interviewer'].value_counts()
    
interviewererror=pd.DataFrame(df_s)    

total_sum = interviewererror.sum()
total_sum.name = 'Total'
interviewererror = interviewererror._append(total_sum)
interviewererror['Total']=interviewererror.sum(min_count=1,axis=1)
   
inside_append_dataframe_with_blank_rows(output_path, df_modified)
inside_append_dataframe_with_blank_rows(output_path, interviewererror)



# Error19: Price fluctuation between alternate  & regular brand 

Error_n = ['Error19: Price fluctuation between alternate  & regular brand ']
df_name= pd.DataFrame(Error_n) 
existing_df = pd.read_excel(output_path)
startrow = existing_df.shape[0] + 4
with pd.ExcelWriter(output_path, engine='openpyxl', mode='a', if_sheet_exists='overlay') as writer:
    df_name.to_excel(writer, startrow=startrow, index=False, header=False)



df_global=df.copy()


df_global = df_global.dropna(subset=['Q25_1'])
df_global = df_global[df_global['Q25_1'] != -1]

df_global.reset_index(drop=True, inplace=True)

df_dictformation = pd.read_excel(r'D:\Input\Cigarette\Brand Health Study(October 2024)\Input\Data input\BHS 22-Oct-24_DataMap.xlsx','Price')
dictionary = dict(zip(df_dictformation['Column'], df_dictformation['Brand']))




for df_row in range (len(df_global)):
   
    if (dictionary[df_global.loc[df_row,'Q21']])-(dictionary[df_global.loc[df_row,'Q25_1']])<=2 and (dictionary[df_global.loc[df_row,'Q21']])-(dictionary[df_global.loc[df_row,'Q25_1']])>=-2:
    
        df_global.drop(df_row,inplace=True)
  
    else:
        pass
    
    
df_modified = df_global.loc[:,['Interviewer','Q21','Q25_1']]


df_dictformation = pd.read_excel(r'D:\Input\Cigarette\Brand Health Study(October 2024)\Input\Data input\BHS 22-Oct-24_DataMap.xlsx','MOUB')



# Join two columns into a dictionary
# Assuming 'Column1' and 'Column2' are the names of the columns you want to join
dict_format = dict(zip(df_dictformation['Column'], df_dictformation['Brand']))


df_modified['Q21'] = df_modified['Q21'].replace(dict_format)
df_modified['Q25_1'] = df_modified['Q25_1'].replace(dict_format)

    

df_s = df_modified['Interviewer'].value_counts()
    
interviewererror=pd.DataFrame(df_s)    

total_sum = interviewererror.sum()
total_sum.name = 'Total'
interviewererror = interviewererror._append(total_sum)
interviewererror['Total']=interviewererror.sum(min_count=1,axis=1)
   
inside_append_dataframe_with_blank_rows(output_path, df_modified)
inside_append_dataframe_with_blank_rows(output_path, interviewererror)







# Error20:Price quoted for MOUB


Error_n = ['Error20:Price quoted for MOUB']
df_name= pd.DataFrame(Error_n) 
existing_df = pd.read_excel(output_path)
startrow = existing_df.shape[0] + 4
with pd.ExcelWriter(output_path, engine='openpyxl', mode='a', if_sheet_exists='overlay') as writer:
    df_name.to_excel(writer, startrow=startrow, index=False, header=False)



df_global=df.copy()
df_global = df_global.dropna(subset=['Q28'])
df_global = df_global.dropna(subset=['Q29'])





# MOUB brand naming

df_dictformation = pd.read_excel(r'D:\Input\Cigarette\Brand Health Study(October 2024)\Input\Data input\BHS 22-Oct-24_DataMap.xlsx','MOUB')
dict_format = dict(zip(df_dictformation['Column'], df_dictformation['Brand']))
df_global['Q21'] = df_global['Q21'].replace(dict_format)


df_global1=df_global[df_global['Q28'] != -1]
df_global2=df_global[df_global['Q29'] != -1]

crosstab_result = pd.crosstab(df_global1['Q21'], df_global1['Q28'])
crosstab_result1 = pd.crosstab(df_global2['Q21'], df_global2['Q29'])


inside_append_dataframe_with_blank_rows(output_path, crosstab_result)

inside_append_dataframe_with_blank_rows(output_path, crosstab_result1)





















# Error21: Percentage of loose vs pack

Error_n = ['Error21: Percentage of loose vs pack ']
df_name= pd.DataFrame(Error_n) 
existing_df = pd.read_excel(output_path)
startrow = existing_df.shape[0] + 4
with pd.ExcelWriter(output_path, engine='openpyxl', mode='a', if_sheet_exists='overlay') as writer:
    df_name.to_excel(writer, startrow=startrow, index=False, header=False)

df_global=df.copy()
input_string1=[1,2]
input_string2=['Loose','Packet']
dictionary = dict(zip(input_string1, input_string2))
df_global['Q27'] = df_global['Q27'].replace(dictionary)



df_percent = df_global['Q27'].value_counts(normalize=True) * 100  
df_percent = df_percent.round(0).astype(int)
Df_buyerspercen=pd.DataFrame(df_percent)   
inside_append_dataframe_with_blank_rows(output_path, Df_buyerspercen)





# Error22: Sticks, a pack consist of?

Error_n = ['Error22: Sticks, a pack consist of? (Q29_1)']
df_name= pd.DataFrame(Error_n) 
existing_df = pd.read_excel(output_path)
startrow = existing_df.shape[0] + 4
with pd.ExcelWriter(output_path, engine='openpyxl', mode='a', if_sheet_exists='overlay') as writer:
    df_name.to_excel(writer, startrow=startrow, index=False, header=False)

df_global=df.copy()
df_filtered = df_global[df_global['Q29_1'] != -1]

input_string1=[1,2,3,4]
input_string2=['5 sticks','10 sticks','16 sticks','20 sticks']
dictionary=dict(zip(input_string1,input_string2))
df_filtered['Q29_1']=df_filtered['Q29_1'].replace(dictionary)


df_modified = df_filtered.loc[:, ['Q29_1', 'Interviewer']]
crosstab_result = pd.crosstab(df_modified['Interviewer'], df_modified['Q29_1'])
count1=pd.DataFrame(crosstab_result )
count1['Total']=count1.sum(min_count=1,axis=1)


total=count1.sum()
# total.name='Total'
# count1=count1._append(total)
count1.loc['Total']=total


inside_append_dataframe_with_blank_rows(output_path, count1)










# Error23: Mild or strong? (Q31)

Error_n = [' Error23: Mild or strong? (Q31)']
df_name= pd.DataFrame(Error_n) 
existing_df = pd.read_excel(output_path)
startrow = existing_df.shape[0] + 4
with pd.ExcelWriter(output_path, engine='openpyxl', mode='a', if_sheet_exists='overlay') as writer:
    df_name.to_excel(writer, startrow=startrow, index=False, header=False)

df_global=df.copy()

df_global=df.copy()
input_string1=[1,2]
input_string2=['Strong','Mild']
dictionary = dict(zip(input_string1, input_string2))
df_global['Q31'] = df_global['Q31'].replace(dictionary)


df_modified = df_global.loc[:,['Q31','Interviewer']]
crosstab_result = pd.crosstab(df_modified['Interviewer'], df_modified['Q31'])
count1=pd.DataFrame(crosstab_result )
count1['Total']=count1.sum(min_count=1,axis=1)


total=count1.sum()
# total.name='Total'
# count1=count1._append(total)
count1.loc['Total']=total
inside_append_dataframe_with_blank_rows(output_path, count1)




df_percent = df_global['Q31'].value_counts(normalize=True) * 100  
df_percent = df_percent.round(0).astype(int)
Df_buyerspercen=pd.DataFrame(df_percent)   
inside_append_dataframe_with_blank_rows(output_path, Df_buyerspercen)









# Error24: Regular + Previous is Mild or strong? (Q32)

Error_n = [' Error24: Regular + Previous is Mild or strong? (Q32)']
df_name= pd.DataFrame(Error_n) 
existing_df = pd.read_excel(output_path)
startrow = existing_df.shape[0] + 4
with pd.ExcelWriter(output_path, engine='openpyxl', mode='a', if_sheet_exists='overlay') as writer:
    df_name.to_excel(writer, startrow=startrow, index=False, header=False)

df_global=df.copy()

columns_to_process = [f'T_Q32_{i}' for i in range(1, 102)]

# Replace -1 with NaN in the specified columns
df_global[columns_to_process] = df_global[columns_to_process].replace(-1, np.nan)
df_global[columns_to_process] = df_global[columns_to_process].replace(2, 'Strong')
df_global[columns_to_process] = df_global[columns_to_process].replace(1, 'Mild')






# List of columns to process
columns_to_process = [f'T_Q32_{i}' for i in range(1, 102)]

# Initialize a dictionary to store the counts
counts = {'Brand': [], 'Strong': [], 'Mild': []}

# Loop through each column and count the occurrences of 1 and 2
for column in columns_to_process:
    strong_count = (df_global[column] =='Strong').sum()
    mild_count = (df_global[column] == 'Mild').sum()
    counts['Brand'].append(column)
    counts['Strong'].append(strong_count)
    counts['Mild'].append(mild_count)

# Create a summary DataFrame
summary_df = pd.DataFrame(counts)

string1="T_Q32_1,T_Q32_2,T_Q32_3,T_Q32_4,T_Q32_5,T_Q32_6,T_Q32_7,T_Q32_8,T_Q32_9,T_Q32_10,T_Q32_11,T_Q32_12,T_Q32_13,T_Q32_14,T_Q32_15,T_Q32_16,T_Q32_17,T_Q32_18,T_Q32_19,T_Q32_20,T_Q32_21,T_Q32_22,T_Q32_23,T_Q32_24,T_Q32_25,T_Q32_26,T_Q32_27,T_Q32_28,T_Q32_29,T_Q32_30,T_Q32_31,T_Q32_32,T_Q32_33,T_Q32_34,T_Q32_35,T_Q32_36,T_Q32_37,T_Q32_38,T_Q32_39,T_Q32_40,T_Q32_41,T_Q32_42,T_Q32_43,T_Q32_44,T_Q32_45,T_Q32_46,T_Q32_47,T_Q32_48,T_Q32_49,T_Q32_50,T_Q32_51,T_Q32_52,T_Q32_53,T_Q32_54,T_Q32_55,T_Q32_56,T_Q32_57,T_Q32_58,T_Q32_59,T_Q32_60,T_Q32_61,T_Q32_62,T_Q32_63,T_Q32_64,T_Q32_65,T_Q32_66,T_Q32_67,T_Q32_68,T_Q32_69,T_Q32_70,T_Q32_71,T_Q32_72,T_Q32_73,T_Q32_74,T_Q32_75,T_Q32_76,T_Q32_77,T_Q32_78,T_Q32_79,T_Q32_80,T_Q32_81,T_Q32_82,T_Q32_83,T_Q32_84,T_Q32_85,T_Q32_86,T_Q32_87,T_Q32_88,T_Q32_89,T_Q32_90,T_Q32_91,T_Q32_92,T_Q32_93,T_Q32_94,T_Q32_95,T_Q32_96,T_Q32_97,T_Q32_98,T_Q32_99,T_Q32_100,T_Q32_101"
input_string1 = string1.split(',')  
input_string1 = [item.strip() for item in input_string1]
string="American Club ,Cavanders Gold Rich Taste ,Chancellor ,Charminar Filter ,Charms Special Blue ,Classic ,Editions Trio ,Flake Special Filter ,Focus Mint  ,Gold Flake Kings ,Gold Flake Premium ,Gold Flake Premium Neo Smart ,Gold Flake Indie Mint ,Gold Flake Special ,Gold Flake Special Mint ,Gold Flake Super Star ,India King ,Marlboro KSFT ,Marlboro Advance Compact ,Marlboro Pocket Filter ,Navy Cut Fruit ,Navy Cut Virginia Filter ,Red & White Select ,Red & White Select,Regent ,Regent Black ,Regent Cool ,Silk Cut Blue ,Silk Cut Filter ,Silk Cut Virginia ,Special Blues ,Special Red Longs ,Special Red Signature ,Stellar Cool Blast  ,T3 White  ,Total Refresh ,Total Royal Twist ,Total Spearmint ,Wave Cool Mint ,Wills Navy Cut Filter ,Wills Navy Cut,American Club Mint ,American Club Smash ,American Fruit ,Benson & Hedges  ,Berkeley ,Berkely ,Blue Charms ,Blue Charms ,Bristol ,Cavander Gold  ,Chancellor ,Charminar Plains ,Charms Regular Filter ,Classic Connect ,Classic Ice Burst ,Club One ,Duke ,Editions Active Mint ,Editions Ice Fruit ,Editions Spark ,Flake Excel ,Flake Liberty ,Flake Mint Switch ,Flake Nova ,Flake White ,Gold Flake Century ,Gold Flake Filter ,Gold Flake Filter ,Gold Flake Kings ,Gold Flake Kings Lights ,Gold Flake Kings SLK ,Golden Gold Flake ,Kingston ,Marlboro Clove ,Marlboro Fuse Beyond ,NATIONAL GOLD FLAKE ,Navy Cut Deluxe Filter ,Originals ,Panama ,Panama Filter ,Panama Filter ,Player's Fruit ,Player's Mint ,Royal ,Scissors Menthol  ,Classic ,Stellar Slims Define ,Stellar Slims Shift ,Total Active Mint ,Wave Fruity ,Wave Mint ,Will Flake Premium Filter ,Zaffran ,American Club Clove Magik ,Classic AlphaTec ,Classic Double Burst ,Classic Verve ,Stellar Define Pan ,Stellar Shift Duos ,Wills Insignia "
input_string2 = string.split(',')  
# Remove leading and trailing spaces from each item
input_string2 = [item.strip() for item in input_string2]
dictionary = dict(zip(input_string1, input_string2))

summary_df['Brand'] = summary_df['Brand'].replace(dictionary)


inside_append_dataframe_with_blank_rows(output_path, summary_df)









Error_n = [' Error24a: Regualr brand is Mild or strong? (Q32) vs Previous brand is mild or strong']
df_name= pd.DataFrame(Error_n) 
existing_df = pd.read_excel(output_path)
startrow = existing_df.shape[0] + 4
with pd.ExcelWriter(output_path, engine='openpyxl', mode='a', if_sheet_exists='overlay') as writer:
    df_name.to_excel(writer, startrow=startrow, index=False, header=False)



df_global = df.copy()





brand_names = {
    'Brand_{}'.format(i): 'Brand{}'.format(i) for i in range(1, 127)
}








# Function to count strong and mild codes for a given brand column
def count_strong_mild(df, brand_col):
    strong_mild_counts = {f'T_Q32_{i}': {'strong': 0, 'mild': 0} for i in range(1, 127)}
    
    for index, row in df.iterrows():
        brand_code = row[brand_col]
        if not pd.isna(brand_code)and brand_code != -1:
            q32_col = f'T_Q32_{int(brand_code)}'
            if row[q32_col] == 2:
                strong_mild_counts[q32_col]['strong'] += 1
            elif row[q32_col] == 1:
                strong_mild_counts[q32_col]['mild'] += 1
    
    return pd.DataFrame(strong_mild_counts).T

# Count strong and mild for regular brand (Q21)
regular_brand_counts = count_strong_mild(df_global, 'Q21')

# Count strong and mild for previous brand (Q24)
previous_brand_counts = count_strong_mild(df_global, 'Q24')

# Creating dict to rename index
df_dictformation = pd.read_excel(r'D:\Input\Cigarette\Brand Health Study(October 2024)\Input\Data input\BHS 22-Oct-24_DataMap.xlsx','Q32')
brand_names = dict(zip(df_dictformation['Index'], df_dictformation['Brandname']))



regular_brand_counts = regular_brand_counts.rename(index=brand_names)
previous_brand_counts = previous_brand_counts.rename(index=brand_names)


result = pd.concat([regular_brand_counts, previous_brand_counts], axis=1)


# Creating a MultiIndex for the columns
header = pd.MultiIndex.from_tuples(
    [('Regular Brand', 'Strong'), ('Regular Brand', 'Mild'), ('Previous Brand', 'Strong'), ('Previous Brand', 'Mild')],
    names=['Brand type', 'Nature']
)

# Assigning the MultiIndex to the DataFrame columns
result.columns = header









inside_append_dataframe_with_blank_rows(output_path, result)



# Error_n = [' Error24b: Previous brand Mild or Strong (Q32)']
# df_name= pd.DataFrame(Error_n) 
# existing_df = pd.read_excel(output_path)
# startrow = existing_df.shape[0] + 4
# with pd.ExcelWriter(output_path, engine='openpyxl', mode='a', if_sheet_exists='overlay') as writer:
#     df_name.to_excel(writer, startrow=startrow, index=False, header=False)

# inside_append_dataframe_with_blank_rows(output_path, previous_brand_counts)

























# # Error25: Number of brands being coded across all attributes(B1)

# Error_n = [' Error25: Number of brands being coded across all attributes(B1)']
# df_name= pd.DataFrame(Error_n) 
# existing_df = pd.read_excel(output_path)
# startrow = existing_df.shape[0] + 4
# with pd.ExcelWriter(output_path, engine='openpyxl', mode='a', if_sheet_exists='overlay') as writer:
#     df_name.to_excel(writer, startrow=startrow, index=False, header=False)

# df_global=df.copy()





# Error26: Number of times Statements being coded (C1)

Error_n = [' Error26: Number of times Statements being coded (C1)']
df_name= pd.DataFrame(Error_n) 
existing_df = pd.read_excel(output_path)
startrow = existing_df.shape[0] + 4
with pd.ExcelWriter(output_path, engine='openpyxl', mode='a', if_sheet_exists='overlay') as writer:
    df_name.to_excel(writer, startrow=startrow, index=False, header=False)

df_global=df.copy()

# result = df_global.groupby('Interviewer')[input_string1].sum()







string1="A_C1_1,A_C1_2,A_C1_3,A_C1_4,A_C1_5,A_C1_6,A_C1_7,A_C1_8,A_C1_9,A_C1_10,A_C1_11,A_C1_12,A_C1_13,A_C1_14,A_C1_15,A_C1_16"
input_string1 = string1.split(',')  
input_string1 = [item.strip() for item in input_string1]
string="It offers satisfying smoking experience,It has good taste,It has good After Taste – taste that remains in mouth after smoking,Smooth smoking experience,It has right amount of harshness,Good strength / Just the right strength,Good hit / kick / impact,Mouthful of smoke / Volume of smoke which comes in the mouth when you take a puff,It has right amount of effort required to inhale smoke,Cigarette looks good/ stylish,Cigarette pack looks good/ stylish,Good quality of filter,Length of cigarette is right / good,Keeps smell of my breath pleasant even after smoking,Like different capsule flavour of cigarette,Cooling sensation in throat of the capsule "
input_string2 = string.split(',')  
# Remove leading and trailing spaces from each item
input_string2 = [item.strip() for item in input_string2]
dictionary = dict(zip(input_string1, input_string2))

# df_global = df_global.rename(columns=dictionary, inplace=True)


result = df_global.groupby('Interviewer')[input_string1].sum()
result = result.rename(columns=dictionary)

result['Total']=result.sum(min_count=1,axis=1)
total=result.sum()
total.name='Total'
result=result._append(total)
inside_append_dataframe_with_blank_rows(output_path, result)











# Error27: Statement selection (C2)

Error_n = ['  Error27: Statement selection (C2)']
df_name= pd.DataFrame(Error_n) 
existing_df = pd.read_excel(output_path)
startrow = existing_df.shape[0] + 4
with pd.ExcelWriter(output_path, engine='openpyxl', mode='a', if_sheet_exists='overlay') as writer:
    df_name.to_excel(writer, startrow=startrow, index=False, header=False)

df_global=df.copy()


# input_string1=[1,2,3,4,5]
# input_string2=['Ex Diss','Diss','N S/D', 'SS','ES']
# dictionary = dict(zip(input_string1, input_string2))
# df_global['Q31'] = df_global['Q31'].replace(dictionary)







columns_to_process = [f'T_C2_{i}' for i in range(1,6)]

# Replace -1 with NaN in the specified columns
df_global[columns_to_process] = df_global[columns_to_process].replace(-1, np.nan)
df_global[columns_to_process] = df_global[columns_to_process].replace(1, 'Ex Diss')
df_global[columns_to_process] = df_global[columns_to_process].replace(2, 'Diss')
df_global[columns_to_process] = df_global[columns_to_process].replace(3, 'N S/D')
df_global[columns_to_process] = df_global[columns_to_process].replace(4, 'SS')
df_global[columns_to_process] = df_global[columns_to_process].replace(5, 'ES')








# List of columns to process
columns_to_process = [f'T_C2_{i}' for i in range(1, 6)]

# Initialize a dictionary to store the counts
counts = {'Statement': [], 'Ex Diss': [], 'Diss': [],'N S/D': [],'SS': [],'ES': []}

# Loop through each column and count the occurrences of 1 and 2
for column in columns_to_process:
    Ex_Diss_count = (df_global[column] =='Ex Diss').sum()
    Diss_count = (df_global[column] == 'Diss').sum()
    NSD_count = (df_global[column] =='N S/D').sum()
    
    SS_count = (df_global[column] =='SS').sum()
    
    ES_count = (df_global[column] =='ES').sum()
   
    counts['Statement'].append(column)
    counts['Ex Diss'].append(Ex_Diss_count)
    counts['Diss'].append(Diss_count)
    counts['N S/D'].append(NSD_count)
    counts['SS'].append(SS_count)
    counts['ES'].append(ES_count)

# Create a summary DataFrame
summary_df = pd.DataFrame(counts)

string1="T_C2_1,T_C2_2,T_C2_3,T_C2_4,T_C2_5,T_C2_3,T_C2_4,T_C2_5,T_C2_4,T_C2_5"
input_string1 = string1.split(',')  
input_string1 = [item.strip() for item in input_string1]
string="Overall satisfaction  ,Quality of filter ,Taste of the cigarette ,After Taste ,Flavour of Capsule "
input_string2 = string.split(',')  
# Remove leading and trailing spaces from each item
input_string2 = [item.strip() for item in input_string2]
dictionary = dict(zip(input_string1, input_string2))

summary_df['Statement'] = summary_df['Statement'].replace(dictionary)

inside_append_dataframe_with_blank_rows(output_path, summary_df)























# Error28: Just Right scale (C3)

Error_n = [' Error28: Just Right scale (C3)']
df_name= pd.DataFrame(Error_n) 
existing_df = pd.read_excel(output_path)
startrow = existing_df.shape[0] + 4
with pd.ExcelWriter(output_path, engine='openpyxl', mode='a', if_sheet_exists='overlay') as writer:
    df_name.to_excel(writer, startrow=startrow, index=False, header=False)

df_global=df.copy()


# input_string1=[1,2,3,4,5]
# input_string2=['Ex Diss','Diss','N S/D', 'SS','ES']
# dictionary = dict(zip(input_string1, input_string2))
# df_global['Q31'] = df_global['Q31'].replace(dictionary)







columns_to_process = [f'T_C3_{i}' for i in range(1,8)]

# Replace -1 with NaN in the specified columns
df_global[columns_to_process] = df_global[columns_to_process].replace(-1, np.nan)
df_global[columns_to_process] = df_global[columns_to_process].replace(1, 'Too Less')
df_global[columns_to_process] = df_global[columns_to_process].replace(2, 'Slightly less')
df_global[columns_to_process] = df_global[columns_to_process].replace(3, 'JR')
df_global[columns_to_process] = df_global[columns_to_process].replace(4, 'Slightly More')
df_global[columns_to_process] = df_global[columns_to_process].replace(5, 'Too Much')








# List of columns to process
columns_to_process = [f'T_C3_{i}' for i in range(1,8)]

# Initialize a dictionary to store the counts
counts = {'Statement': [], 'Too Less': [], 'Slightly less': [],'JR': [],'Slightly More': [],'Too Much': []}

# Loop through each column and count the occurrences of 1 and 2
for column in columns_to_process:
    To_less_count = (df_global[column] =='Too Less').sum()
    Slightless_count = (df_global[column] == 'Slightly less').sum()
    JR_count = (df_global[column] =='JR').sum()
    
    Slightmore_count = (df_global[column] =='Slightly More').sum()
    
    Toomuch_count = (df_global[column] =='Too Much').sum()
   
    counts['Statement'].append(column)
    counts['Too Less'].append(To_less_count)
    counts['Slightly less'].append(Slightless_count)
    counts['JR'].append(JR_count)
    counts['Slightly More'].append(Slightmore_count)
    counts['Too Much'].append(Toomuch_count)

# Create a summary DataFrame
summary_df = pd.DataFrame(counts)

string1="T_C3_1,T_C3_2,T_C3_3,T_C3_4,T_C3_5,T_C3_6,T_C3_7"
input_string1 = string1.split(',')  
input_string1 = [item.strip() for item in input_string1]
string="Mouthful of smoke ,Effort required to inhale smoke ,Hit or kick,Smooth smoking experience ,Harshness of the cigarette ,Strength of the cigarette ,Length of the cigarette  "
input_string2 = string.split(',')  
# Remove leading and trailing spaces from each item
input_string2 = [item.strip() for item in input_string2]
dictionary = dict(zip(input_string1, input_string2))

summary_df['Statement'] = summary_df['Statement'].replace(dictionary)

inside_append_dataframe_with_blank_rows(output_path, summary_df)


















# Error30: Reasons to smoke regular brand (D1)

Error_n = [' Error30: Reasons to smoke regular brand (D1)']
df_name= pd.DataFrame(Error_n) 
existing_df = pd.read_excel(output_path)
startrow = existing_df.shape[0] + 4
with pd.ExcelWriter(output_path, engine='openpyxl', mode='a', if_sheet_exists='overlay') as writer:
    df_name.to_excel(writer, startrow=startrow, index=False, header=False)

df_global=df.copy()



string1="A_D1_2,A_D1_3,A_D1_5,A_D1_6,A_D1_8,A_D1_9,A_D1_10,A_D1_11,A_D1_12,A_D1_13,A_D1_15,A_D1_16,A_D1_18,A_D1_19,A_D1_20,A_D1_21,A_D1_22,A_D1_24,A_D1_25,A_D1_26,A_D1_28,A_D1_29,A_D1_30,A_D1_32,A_D1_33"
input_string1 = string1.split(',')  
input_string1 = [item.strip() for item in input_string1]
string="I liked this cigarette more,I have been smoking this cigarette since a long time,High quality cigarette,Everything taken together the brand is appealing to me,It offers satisfying smoking experience,Good taste / Better taste,Smooth smoking experience,Good strength/ Just the right strength,Good hit/ kick/ impact,Good Mouthful of smoke / Volume of smoke which comes in the mouth when you take a puff,Cigarette looks good/ stylish,Cigarette pack looks good/ stylish,Good quality of filter,Length is right / good,Keeps smell of my breath pleasant even after smoking,Can change flavour with capsules,Cooling sensation in throat,Price is affordable/ within my budget,It is for people like me,It is a better brand of cigarette,Friends / Colleagues recommend this brand / smoke this brand,Shopkeepers recommended this brand,It is a very popular cigarette in the market,This cigarette is easily available in the market,This cigarette is available in the shop near my home/ office/ others "
input_string2 = string.split(',')  
# Remove leading and trailing spaces from each item
input_string2 = [item.strip() for item in input_string2]
dictionary = dict(zip(input_string1, input_string2))

# df_global = df_global.rename(columns=dictionary, inplace=True)


result = df_global.groupby('Interviewer')[input_string1].sum()
result = result.rename(columns=dictionary)

result['Total']=result.sum(min_count=1,axis=1)
total=result.sum()
total.name='Total'
result=result._append(total)
inside_append_dataframe_with_blank_rows(output_path, result)









# Error: Awareness of Cig with Capsule (H1)

Error_n = [' Error: Awareness of Cig with Capsule (H1)']
df_name= pd.DataFrame(Error_n) 
existing_df = pd.read_excel(output_path)
startrow = existing_df.shape[0] + 4
with pd.ExcelWriter(output_path, engine='openpyxl', mode='a', if_sheet_exists='overlay') as writer:
    df_name.to_excel(writer, startrow=startrow, index=False, header=False)

df_global=df.copy()

input_string1=[1,2]

input_string2 = ['Yes','No']
dictionary = dict(zip(input_string1, input_string2))
df_global['H1'] = df_global['H1'].replace(dictionary)
df_global['H1'] = df_global['H1'].replace(-1, np.nan)


df_modified = df_global.loc[:,['H1','Interviewer']]
crosstab_result = pd.crosstab(df_modified['Interviewer'], df_modified['H1'])
count1=pd.DataFrame(crosstab_result )
count1['Total']=count1.sum(min_count=1,axis=1)


total=count1.sum()
# total.name='Total'
# count1=count1._append(total)
count1.loc['Total']=total


inside_append_dataframe_with_blank_rows(output_path, count1)













# Error: Capsule bursting (H5)

Error_n = [' Error: Capsule bursting (H5)']
df_name= pd.DataFrame(Error_n) 
existing_df = pd.read_excel(output_path)
startrow = existing_df.shape[0] + 4
with pd.ExcelWriter(output_path, engine='openpyxl', mode='a', if_sheet_exists='overlay') as writer:
    df_name.to_excel(writer, startrow=startrow, index=False, header=False)

df_global=df.copy()

input_string1=[1,2,3,4]

input_string2 = ['Yes, always','Yes,mostly','No, mostly smoke without bursting ','Never']
dictionary = dict(zip(input_string1, input_string2))
df_global['H5'] = df_global['H5'].replace(dictionary)
df_global['H5'] = df_global['H5'].replace(-1, np.nan)


df_modified = df_global.loc[:,['H5','Interviewer']]
crosstab_result = pd.crosstab(df_modified['Interviewer'], df_modified['H5'])
count1=pd.DataFrame(crosstab_result )
count1['Total']=count1.sum(min_count=1,axis=1)


total=count1.sum()
# total.name='Total'
# count1=count1._append(total)
count1.loc['Total']=total


inside_append_dataframe_with_blank_rows(output_path, count1)






# Error: Reasons not regularly smoke a Capsule cigarette (H7)

Error_n = [' Error: Reasons not regularly smoke a Capsule cigarette (H7)']
df_name= pd.DataFrame(Error_n) 
existing_df = pd.read_excel(output_path)
startrow = existing_df.shape[0] + 4
with pd.ExcelWriter(output_path, engine='openpyxl', mode='a', if_sheet_exists='overlay') as writer:
    df_name.to_excel(writer, startrow=startrow, index=False, header=False)

df_global=df.copy()



string1="A_H7_2,A_H7_3,A_H7_5,A_H7_6,A_H7_8,A_H7_10,A_H7_11,A_H7_13,A_H7_14,A_H7_15,A_H7_16,A_H7_17,A_H7_18,A_H7_19,A_H7_21,A_H7_22,A_H7_24,A_H7_25,A_H7_26,A_H7_27,A_H7_28,A_H7_29,A_H7_31,A_H7_32,A_H7_34,A_H7_35,A_H7_36,A_H7_38,A_H7_39,A_H7_40"
input_string1 = string1.split(',')  
input_string1 = [item.strip() for item in input_string1]
string="Like my regular cigarette more,Smoking my regular cigarette since a long time,Overall capsule cigarette is not a good quality product,Capsule cigarette is not appealing to me,Smoked capsule cigarette in the past and it was not good,Don't know much about capsule cigarettes,Never tried capsule cigarette,Like taste of original tobacco,Does not offer satisfying smoking experience,Does not have good taste,Does not have smooth smoking experience,Does not have good strength/ does not have right strength,Does not provide right hit/ kick/ impact,Does not provide a good mouthful of smoke / Volume of smoke which comes in the mouth when you take a puff,Stick does not look good/ stylish,Pack does not look good/ stylish,No difference as compared to regular cigarettes,Does not have good quality of filter,Length of Capsule cigarette is small,Smell of the breath becomes unpleasant after smoking ,Capsule cigarette has limited flavours,It is difficult to burst capsules,Capsule cigarette is not value for money,Capsule cigarette is not for people like me,Friends/Colleagues do not recommend ,Shopkeepers do not recommend ,Not a very popular cigarette in the market,Capsule cigarette is not easily available in the market,Capsule cigarette is not available in the shop near my home/ office/ others,Others "
input_string2 = string.split(',')  
# Remove leading and trailing spaces from each item
input_string2 = [item.strip() for item in input_string2]
dictionary = dict(zip(input_string1, input_string2))

# df_global = df_global.rename(columns=dictionary, inplace=True)

for column in input_string1:

# Replace -1 with NaN in the specified columns
    df_global[column] = df_global[column].replace(-1, np.nan)

result = df_global.groupby('Interviewer')[input_string1].sum()
result = result.rename(columns=dictionary)

result['Total']=result.sum(min_count=1,axis=1)
total=result.sum()
total.name='Total'
result=result._append(total)
inside_append_dataframe_with_blank_rows(output_path, result)











# Error: Seen this PACKET of cigarette brand Blue Charms? (S3)

Error_n = [' Error: Seen this PACKET of cigarette brand Blue Charms? (S3)']
df_name= pd.DataFrame(Error_n) 
existing_df = pd.read_excel(output_path)
startrow = existing_df.shape[0] + 4
with pd.ExcelWriter(output_path, engine='openpyxl', mode='a', if_sheet_exists='overlay') as writer:
    df_name.to_excel(writer, startrow=startrow, index=False, header=False)

df_global=df.copy()

input_string1=[1,2]

input_string2 = ['Yes','No/Not sure']
dictionary = dict(zip(input_string1, input_string2))
df_global['S3'] = df_global['S3'].replace(dictionary)
df_global['S3'] = df_global['S3'].replace(-1, np.nan)


df_modified = df_global.loc[:,['S3','Interviewer']]
crosstab_result = pd.crosstab(df_modified['Interviewer'], df_modified['S3'])
count1=pd.DataFrame(crosstab_result )
count1['Total']=count1.sum(min_count=1,axis=1)


total=count1.sum()
# total.name='Total'
# count1=count1._append(total)
count1.loc['Total']=total


inside_append_dataframe_with_blank_rows(output_path, count1)













# Error: How much do you like the PACKET of this cigarette brand? (S4)

Error_n = [' Error: How much do you like the PACKET of this cigarette brand? (S4)']
df_name= pd.DataFrame(Error_n) 
existing_df = pd.read_excel(output_path)
startrow = existing_df.shape[0] + 4
with pd.ExcelWriter(output_path, engine='openpyxl', mode='a', if_sheet_exists='overlay') as writer:
    df_name.to_excel(writer, startrow=startrow, index=False, header=False)

df_global=df.copy()

input_string1=[1,2,3,4,5]

input_string2 = ['Do not like it at all','Dislike it somewhat','Neither like it nor dislike it','Like it somewhat','Like it very much']
dictionary = dict(zip(input_string1, input_string2))
df_global['S4'] = df_global['S4'].replace(dictionary)
df_global['S4'] = df_global['S4'].replace(-1, np.nan)


df_modified = df_global.loc[:,['S4','Interviewer']]
crosstab_result = pd.crosstab(df_modified['Interviewer'], df_modified['S4'])
count1=pd.DataFrame(crosstab_result )
count1['Total']=count1.sum(min_count=1,axis=1)


total=count1.sum()
# total.name='Total'
# count1=count1._append(total)
count1.loc['Total']=total


inside_append_dataframe_with_blank_rows(output_path, count1)












# Error: How much you agree or disagree with each of the statement (S5)

Error_n = ['  Error: How much you agree or disagree with each of the statement (S5)']
df_name= pd.DataFrame(Error_n) 
existing_df = pd.read_excel(output_path)
startrow = existing_df.shape[0] + 4
with pd.ExcelWriter(output_path, engine='openpyxl', mode='a', if_sheet_exists='overlay') as writer:
    df_name.to_excel(writer, startrow=startrow, index=False, header=False)

df_global=df.copy()


# input_string1=[1,2,3,4,5]
# input_string2=['Ex Diss','Diss','N S/D', 'SS','ES']
# dictionary = dict(zip(input_string1, input_string2))
# df_global['Q31'] = df_global['Q31'].replace(dictionary)







columns_to_process = [f'T_S5_{i}' for i in range(1,5)]

# Replace -1 with NaN in the specified columns
df_global[columns_to_process] = df_global[columns_to_process].replace(-1, np.nan)
df_global[columns_to_process] = df_global[columns_to_process].replace(1, 'Comp disagree')
df_global[columns_to_process] = df_global[columns_to_process].replace(2, 'Somewhat dis')
df_global[columns_to_process] = df_global[columns_to_process].replace(3, 'Neither agree/disagree')
df_global[columns_to_process] = df_global[columns_to_process].replace(4, 'Somewhat agree')
df_global[columns_to_process] = df_global[columns_to_process].replace(5, 'Completely agree')








# List of columns to process
columns_to_process = [f'T_S5_{i}' for i in range(1, 5)]

# Initialize a dictionary to store the counts
counts = {'Statement': [], 'Comp disagree': [], 'Somewhat dis': [],'Neither agree/disagree': [],'Somewhat agree': [],'Completely agree': []}

# Loop through each column and count the occurrences of 1 and 2
for column in columns_to_process:
    Comp_disagree_count = (df_global[column] =='Comp disagree').sum()
    Somewhat_dis_count = (df_global[column] == 'Somewhat dis').sum()
    NAD_count = (df_global[column] =='Neither agree/disagree').sum()
    
    SA_count = (df_global[column] =='Somewhat agree').sum()
    
    CA_count = (df_global[column] =='Completely agree').sum()
   
    counts['Statement'].append(column)
    counts['Comp disagree'].append(Comp_disagree_count)
    counts['Somewhat dis'].append(Somewhat_dis_count)
    counts['Neither agree/disagree'].append(NAD_count)
    counts['Somewhat agree'].append(SA_count)
    counts['Completely agree'].append(CA_count)

# Create a summary DataFrame
summary_df = pd.DataFrame(counts)

string1="T_S5_1,T_S5_2,T_S5_3,T_S5_4"
input_string1 = string1.split(',')  
input_string1 = [item.strip() for item in input_string1]
string="It is an Attractive pack,It is a Unique pack,Is a premium pack,It is an exciting pack "
input_string2 = string.split(',')  
# Remove leading and trailing spaces from each item
input_string2 = [item.strip() for item in input_string2]
dictionary = dict(zip(input_string1, input_string2))

summary_df['Statement'] = summary_df['Statement'].replace(dictionary)

inside_append_dataframe_with_blank_rows(output_path, summary_df)














# Error: GPS data absent

Error_n = ['  Error: GPS data absent']
df_name= pd.DataFrame(Error_n) 
existing_df = pd.read_excel(output_path)
startrow = existing_df.shape[0] + 4
with pd.ExcelWriter(output_path, engine='openpyxl', mode='a', if_sheet_exists='overlay') as writer:
    df_name.to_excel(writer, startrow=startrow, index=False, header=False)

df_global=df.copy()


missing_values = df.groupby('Interviewer')['Latitude'].apply(lambda x: x.isnull().sum())

inside_append_dataframe_with_blank_rows(output_path, missing_values)













# # Error: Click a Picture of the Respondent (P5)

# Error_n = [' Click a Picture of the Respondent (P5)']
# df_name= pd.DataFrame(Error_n) 
# existing_df = pd.read_excel(output_path)
# startrow = existing_df.shape[0] + 4
# with pd.ExcelWriter(output_path, engine='openpyxl', mode='a', if_sheet_exists='overlay') as writer:
#     df_name.to_excel(writer, startrow=startrow, index=False, header=False)

# df_global=df.copy()

# input_string1=[1,2]

# input_string2 = ['Open Camera','Refused']
# dictionary = dict(zip(input_string1, input_string2))
# df_global['S3'] = df_global['S3'].replace(dictionary)
# df_global['S3'] = df_global['S3'].replace(-1, np.nan)


# df_modified = df_global.loc[:,['S3','Interviewer']]
# crosstab_result = pd.crosstab(df_modified['Interviewer'], df_modified['S3'])
# count1=pd.DataFrame(crosstab_result )
# count1['Total']=count1.sum(min_count=1,axis=1)


# total=count1.sum()
# # total.name='Total'
# # count1=count1._append(total)
# count1.loc['Total']=total


# inside_append_dataframe_with_blank_rows(output_path, count1)













# For brand frequencycount


Error_n = ['Error:For brand frequency count interview wise (E1)']
df_name= pd.DataFrame(Error_n) 
existing_df = pd.read_excel(output_path)
startrow = existing_df.shape[0] + 4
with pd.ExcelWriter(output_path, engine='openpyxl', mode='a', if_sheet_exists='overlay') as writer:
    df_name.to_excel(writer, startrow=startrow, index=False, header=False)





df_global=df.copy()
df_dictformation = pd.read_excel(r'D:\Input\Cigarette\Brand Health Study(October 2024)\Input\Data input\BHS 22-Oct-24_DataMap.xlsx','MOUB')
dict_format = dict(zip(df_dictformation['Column'], df_dictformation['Brand']))

brand_columns = ['T_E1_BrandCode_1','T_E1_BrandCode_2','T_E1_BrandCode_3']
df_global[brand_columns] = df_global[brand_columns].replace(dict_format)

combined_brands = pd.concat([df_global['T_E1_BrandCode_1'], df_global['T_E1_BrandCode_2'], df_global['T_E1_BrandCode_3']])
combined_brand_counts = combined_brands.value_counts()
Valuecount=pd.DataFrame(combined_brand_counts)
total_sum = Valuecount.sum()

if isinstance(total_sum, (np.int64, np.float64)):
    pass
else:
    total_sum.name = 'Total'
    Valuecount=Valuecount._append(total_sum)
Valuecount['Brand Type'] = Valuecount.index.to_series().apply(lambda x: 'Core Brand' if x in core_brands else 'Non-Core Brand')

# Valuecount['Highlight'] = df['MOUB_Brands'].apply(lambda x: 'Highlight' if x in core_brands else 'Normal')






# For brand frequency count interview wise
interviewer_brand_counts = df.groupby('Interviewer')[['T_E1_BrandCode_1', 'T_E1_BrandCode_2', 'T_E1_BrandCode_3']].apply(lambda x: x.stack().value_counts()).unstack().fillna(0)
total=interviewer_brand_counts.sum()

if isinstance(total, (np.int64, np.float64)):
    pass
else:
    total.name = 'Total'
    interviewer_brand_counts=interviewer_brand_counts._append(total)


# total.name='Total'
# interviewer_brand_counts=interviewer_brand_counts._append(total)











inside_append_dataframe_with_blank_rows(output_path, Valuecount)

inside_append_dataframe_with_blank_rows(output_path, interviewer_brand_counts)




Error_n = [' Error For 1st brand (E1):  Reason not to smoke it on regular basis ' ]
df_name= pd.DataFrame(Error_n) 
existing_df = pd.read_excel(output_path)
startrow = existing_df.shape[0] + 4
with pd.ExcelWriter(output_path, engine='openpyxl', mode='a', if_sheet_exists='overlay') as writer:
    df_name.to_excel(writer, startrow=startrow, index=False, header=False)

df_global=df.copy()



df_dictformation = pd.read_excel(r'D:\Input\Cigarette\Brand Health Study(October 2024)\Input\Data input\BHS 22-Oct-24_DataMap.xlsx','E1')



# Join two columns into a dictionary
# Assuming 'Column1' and 'Column2' are the names of the columns you want to join
dict_format = dict(zip(df_dictformation['Column1'], df_dictformation['Statement1']))





df_global.rename(columns=dict_format, inplace=True)
print(df_global)

df_global[list(dict_format.values())] =df_global[list(dict_format.values())].replace(-1, np.nan)






result = df_global.groupby('Interviewer')[list(dict_format.values())].sum()


result['Total']=result.sum(min_count=1,axis=1)
total=result.sum()
total.name='Total'
result=result._append(total)
inside_append_dataframe_with_blank_rows(output_path, result)







Error_n = [' Error For 2nd brand (E1):  Reason not to smoke it on regular basis ' ]
df_name= pd.DataFrame(Error_n) 
existing_df = pd.read_excel(output_path)
startrow = existing_df.shape[0] + 4
with pd.ExcelWriter(output_path, engine='openpyxl', mode='a', if_sheet_exists='overlay') as writer:
    df_name.to_excel(writer, startrow=startrow, index=False, header=False)

df_global=df.copy()



df_dictformation = pd.read_excel(r'D:\Input\Cigarette\Brand Health Study(October 2024)\Input\Data input\BHS 22-Oct-24_DataMap.xlsx','E1')



# Join two columns into a dictionary
# Assuming 'Column1' and 'Column2' are the names of the columns you want to join
dict_format = dict(zip(df_dictformation['Column2'], df_dictformation['Statement2']))





df_global.rename(columns=dict_format, inplace=True)
print(df_global)

df_global[list(dict_format.values())] =df_global[list(dict_format.values())].replace(-1, np.nan)






result = df_global.groupby('Interviewer')[list(dict_format.values())].sum()


result['Total']=result.sum(min_count=1,axis=1)
total=result.sum()
total.name='Total'
result=result._append(total)
inside_append_dataframe_with_blank_rows(output_path, result)





Error_n = [' Error For 3rd brand (E1):  Reason not to smoke it on regular basis ' ]
df_name= pd.DataFrame(Error_n) 
existing_df = pd.read_excel(output_path)
startrow = existing_df.shape[0] + 4
with pd.ExcelWriter(output_path, engine='openpyxl', mode='a', if_sheet_exists='overlay') as writer:
    df_name.to_excel(writer, startrow=startrow, index=False, header=False)

df_global=df.copy()



df_dictformation = pd.read_excel(r'D:\Input\Cigarette\Brand Health Study(October 2024)\Input\Data input\BHS 22-Oct-24_DataMap.xlsx','E1')



# Join two columns into a dictionary
# Assuming 'Column1' and 'Column2' are the names of the columns you want to join
dict_format = dict(zip(df_dictformation['Column3'], df_dictformation['Statement3']))





df_global.rename(columns=dict_format, inplace=True)
print(df_global)

df_global[list(dict_format.values())] =df_global[list(dict_format.values())].replace(-1, np.nan)






result = df_global.groupby('Interviewer')[list(dict_format.values())].sum()


result['Total']=result.sum(min_count=1,axis=1)
total=result.sum()
total.name='Total'
result=result._append(total)
inside_append_dataframe_with_blank_rows(output_path, result)




















# For brand frequencycount


Error_n = ['Error:For brand frequency count interview wise (G1)']
df_name= pd.DataFrame(Error_n) 
existing_df = pd.read_excel(output_path)
startrow = existing_df.shape[0] + 4
with pd.ExcelWriter(output_path, engine='openpyxl', mode='a', if_sheet_exists='overlay') as writer:
    df_name.to_excel(writer, startrow=startrow, index=False, header=False)





df_global=df.copy()
df_dictformation = pd.read_excel(r'D:\Input\Cigarette\Brand Health Study(October 2024)\Input\Data input\BHS 22-Oct-24_DataMap.xlsx','MOUB')
dict_format = dict(zip(df_dictformation['Column'], df_dictformation['Brand']))

brand_columns = ['T_G1_BrandCode_1','T_G1_BrandCode_2','T_G1_BrandCode_3']
df_global[brand_columns] = df_global[brand_columns].replace(dict_format)

combined_brands = pd.concat([df_global['T_G1_BrandCode_1'], df_global['T_G1_BrandCode_2'], df_global['T_G1_BrandCode_3']])

combined_brand_counts = combined_brands.value_counts()
Valuecount=pd.DataFrame(combined_brand_counts)
total_sum = Valuecount.sum()



if isinstance(total_sum, (np.int64, np.float64)):
    pass
else:
    total_sum.name = 'Total'
    Valuecount=Valuecount._append(total_sum)

Valuecount['Brand Type'] = Valuecount.index.to_series().apply(lambda x: 'Core Brand' if x in core_brands else 'Non-Core Brand')








# For brand frequency count interview wise
interviewer_brand_counts = df.groupby('Interviewer')[['T_G1_BrandCode_1', 'T_G1_BrandCode_2', 'T_G1_BrandCode_3']].apply(lambda x: x.stack().value_counts()).unstack().fillna(0)
total=interviewer_brand_counts.sum()


if isinstance(total, (np.int64, np.float64)):
    pass
else:
    total.name = 'Total'
    
    interviewer_brand_counts=interviewer_brand_counts._append(total)







inside_append_dataframe_with_blank_rows(output_path, Valuecount)

inside_append_dataframe_with_blank_rows(output_path, interviewer_brand_counts)









Error_n = [' Error For 1st brand (G1):  Reason not to smoke it on regular basis ' ]
df_name= pd.DataFrame(Error_n) 
existing_df = pd.read_excel(output_path)
startrow = existing_df.shape[0] + 4
with pd.ExcelWriter(output_path, engine='openpyxl', mode='a', if_sheet_exists='overlay') as writer:
    df_name.to_excel(writer, startrow=startrow, index=False, header=False)

df_global=df.copy()



df_dictformation = pd.read_excel(r'D:\Input\Cigarette\Brand Health Study(October 2024)\Input\Data input\BHS 22-Oct-24_DataMap.xlsx','G1')



# Join two columns into a dictionary
# Assuming 'Column1' and 'Column2' are the names of the columns you want to join
dict_format = dict(zip(df_dictformation['Column1'], df_dictformation['Statement1']))





df_global.rename(columns=dict_format, inplace=True)
print(df_global)

df_global[list(dict_format.values())] =df_global[list(dict_format.values())].replace(-1, np.nan)






result = df_global.groupby('Interviewer')[list(dict_format.values())].sum()


result['Total']=result.sum(min_count=1,axis=1)
total=result.sum()
total.name='Total'
result=result._append(total)
inside_append_dataframe_with_blank_rows(output_path, result)







Error_n = [' Error For 2nd brand (G1):  Reason not to smoke it on regular basis ' ]
df_name= pd.DataFrame(Error_n) 
existing_df = pd.read_excel(output_path)
startrow = existing_df.shape[0] + 4
with pd.ExcelWriter(output_path, engine='openpyxl', mode='a', if_sheet_exists='overlay') as writer:
    df_name.to_excel(writer, startrow=startrow, index=False, header=False)

df_global=df.copy()



df_dictformation = pd.read_excel(r'D:\Input\Cigarette\Brand Health Study(October 2024)\Input\Data input\BHS 22-Oct-24_DataMap.xlsx','G1')



# Join two columns into a dictionary
# Assuming 'Column1' and 'Column2' are the names of the columns you want to join
dict_format = dict(zip(df_dictformation['Column2'], df_dictformation['Statement2']))





df_global.rename(columns=dict_format, inplace=True)
print(df_global)

df_global[list(dict_format.values())] =df_global[list(dict_format.values())].replace(-1, np.nan)






result = df_global.groupby('Interviewer')[list(dict_format.values())].sum()


result['Total']=result.sum(min_count=1,axis=1)
total=result.sum()
total.name='Total'
result=result._append(total)
inside_append_dataframe_with_blank_rows(output_path, result)





Error_n = [' Error For 3rd brand (G1):  Reason not to smoke it on regular basis ' ]
df_name= pd.DataFrame(Error_n) 
existing_df = pd.read_excel(output_path)
startrow = existing_df.shape[0] + 4
with pd.ExcelWriter(output_path, engine='openpyxl', mode='a', if_sheet_exists='overlay') as writer:
    df_name.to_excel(writer, startrow=startrow, index=False, header=False)

df_global=df.copy()



df_dictformation = pd.read_excel(r'D:\Input\Cigarette\Brand Health Study(October 2024)\Input\Data input\BHS 22-Oct-24_DataMap.xlsx','G1')



# Join two columns into a dictionary
# Assuming 'Column1' and 'Column2' are the names of the columns you want to join
dict_format = dict(zip(df_dictformation['Column3'], df_dictformation['Statement3']))





df_global.rename(columns=dict_format, inplace=True)
print(df_global)

df_global[list(dict_format.values())] =df_global[list(dict_format.values())].replace(-1, np.nan)






result = df_global.groupby('Interviewer')[list(dict_format.values())].sum()


result['Total']=result.sum(min_count=1,axis=1)
total=result.sum()
total.name='Total'
result=result._append(total)
inside_append_dataframe_with_blank_rows(output_path, result)



























# # For statement frequency


# # Initialize a dictionary to store the counts
# statement_counts = {'Statement1': 0, 'Statement2': 0, 'Statement3': 0}

# # Define the mapping of statements to their respective columns
# statement_mapping = {
#     'Statement1': ['I_1_A_E1_2','I_1_A_E1_3','I_1_A_E1_5','I_1_A_E1_7','I_1_A_E1_8','I_1_A_E1_9','I_1_A_E1_10','I_1_A_E1_11','I_1_A_E1_12','I_1_A_E1_14','I_1_A_E1_15','I_1_A_E1_17','I_1_A_E1_18','I_1_A_E1_19','I_1_A_E1_20','I_1_A_E1_21','I_1_A_E1_22','I_1_A_E1_24','I_1_A_E1_25','I_1_A_E1_27','I_1_A_E1_28','I_1_A_E1_29','I_1_A_E1_31','I_1_A_E1_32','I_1_A_E1_33','I_1_A_E1_34'],
#     'Statement2': ['I_2_A_E1_2','I_2_A_E1_3','I_2_A_E1_5','I_2_A_E1_7','I_2_A_E1_8','I_2_A_E1_9','I_2_A_E1_10','I_2_A_E1_11','I_2_A_E1_12','I_2_A_E1_14','I_2_A_E1_15','I_2_A_E1_17','I_2_A_E1_18','I_2_A_E1_19','I_2_A_E1_20','I_2_A_E1_21','I_2_A_E1_22','I_2_A_E1_24','I_2_A_E1_25','I_2_A_E1_27','I_2_A_E1_28','I_2_A_E1_29','I_2_A_E1_31','I_2_A_E1_32','I_2_A_E1_33','I_2_A_E1_34'],
#     'Statement3': ['I_3_A_E1_2','I_3_A_E1_3','I_3_A_E1_5','I_3_A_E1_7','I_3_A_E1_8','I_3_A_E1_9','I_3_A_E1_10','I_3_A_E1_11','I_3_A_E1_12','I_3_A_E1_14','I_3_A_E1_15','I_3_A_E1_17','I_3_A_E1_18','I_3_A_E1_19','I_3_A_E1_20','I_3_A_E1_21','I_3_A_E1_22','I_3_A_E1_24','I_3_A_E1_25','I_3_A_E1_27','I_3_A_E1_28','I_3_A_E1_29','I_3_A_E1_31','I_3_A_E1_32','I_3_A_E1_33','I_3_A_E1_34']
# }

# # Iterate over each statement
# for statement, columns in statement_mapping.items():
#     # Filter out -1 values and count the occurrences of 1 in these columns
#     statement_counts[statement] = (df_global[columns] == 1).sum().sum()

# statement_countss = pd.DataFrame(statement_counts,index=[0])










# inside_append_dataframe_with_blank_rows(output_path, Valuecount1)

# inside_append_dataframe_with_blank_rows(output_path, interviewer_brand_counts)

# inside_append_dataframe_with_blank_rows(output_path, statement_countss)






# Error: Frequency of brands coded in Q25

Error_n = [' Error: Frequency of brands coded in Q25']
df_name= pd.DataFrame(Error_n) 
existing_df = pd.read_excel(output_path)
startrow = existing_df.shape[0] + 4
with pd.ExcelWriter(output_path, engine='openpyxl', mode='a', if_sheet_exists='overlay') as writer:
    df_name.to_excel(writer, startrow=startrow, index=False, header=False)

df_global=df.copy()

df_global.reset_index(drop=True, inplace=True)



df_dictformation = pd.read_excel(r'D:\Input\Cigarette\Brand Health Study(October 2024)\Input\Data input\BHS 22-Oct-24_DataMap.xlsx','Q25')



# Join two columns into a dictionary
# Assuming 'Column1' and 'Column2' are the names of the columns you want to join
dict_format = dict(zip(df_dictformation['Column'], df_dictformation['Brand']))

# rename of index
df_global.rename(columns=dict_format, inplace=True)

renamed_columns = list(dict_format.values())

# Adding a new column 'Row_Sum' that contains the sum of each row across the renamed columns
sum_of_columns= df_global[renamed_columns].sum()

Valuecount2=pd.DataFrame(sum_of_columns)
total_sum = Valuecount2.sum()
total_sum.name = 'Total'
Valuecount2=Valuecount2._append(total_sum)

df_global[renamed_columns] = df_global[renamed_columns].replace(-1, np.nan)


df_global['sum'] = df_global[renamed_columns].sum(axis=1)
filtered_df = df_global[df_global['sum'] < 3]
result_df = filtered_df[['Interviewer']+renamed_columns]
Valuecount3=result_df['Interviewer'].value_counts()
Valuecount3=pd.DataFrame(Valuecount3)
total_sum = Valuecount3.sum()
total_sum.name = 'Total'
Valuecount3=Valuecount3._append(total_sum)



# df_filt=df_global[df_global['sum']<3]['Interviewer',renamed_columns]
dataframe_filter=pd.DataFrame(result_df)

# Convert non-numeric values to NaN while summing
df_numeric = dataframe_filter.apply(pd.to_numeric, errors='coerce')
                                    
                                    
df_numeric['Total']=df_numeric.sum(min_count=1, axis=1)
total_sum = df_numeric.sum()
total_sum.name = 'Total'
df_numeric=df_numeric._append(total_sum)




inside_append_dataframe_with_blank_rows(output_path, Valuecount2)





Error_n = [' Interviewer who coded less than 3 brands and its frequency count']
df_name= pd.DataFrame(Error_n) 
existing_df = pd.read_excel(output_path)
startrow = existing_df.shape[0] + 4
with pd.ExcelWriter(output_path, engine='openpyxl', mode='a', if_sheet_exists='overlay') as writer:
    df_name.to_excel(writer, startrow=startrow, index=False, header=False)
    
inside_append_dataframe_with_blank_rows(output_path, Valuecount3)



inside_append_dataframe_with_blank_rows(output_path, df_numeric)














# For brand frequencycount B1


Error_n = ['Error:For brand frequency count  (B1)']
df_name= pd.DataFrame(Error_n) 
existing_df = pd.read_excel(output_path)
startrow = existing_df.shape[0] + 4
with pd.ExcelWriter(output_path, engine='openpyxl', mode='a', if_sheet_exists='overlay') as writer:
    df_name.to_excel(writer, startrow=startrow, index=False, header=False)





df_global=df.copy()


df_global.reset_index(drop=True, inplace=True)



df_dictformation = pd.read_excel(r'D:\Input\Cigarette\Brand Health Study(October 2024)\Input\Data input\BHS 22-Oct-24_DataMap.xlsx','B1')



# Join two columns into a dictionary
# Assuming 'Column1' and 'Column2' are the names of the columns you want to join
dict_format = dict(zip(df_dictformation['Brand_Code'], df_dictformation['Brand_name']))
df_global.rename(columns=dict_format, inplace=True)

renamed_columns = list(dict_format.values())


for key, column_name in dict_format.items():
    if column_name in df_global.columns:
        df_global[column_name] = df_global[column_name].replace(-1, 0)


sum_of_columns= df_global[renamed_columns].sum()
Valuecount2=pd.DataFrame(sum_of_columns)


inside_append_dataframe_with_blank_rows(output_path, Valuecount2)











# Combined statementwise brand count (B1)
# Count: Statement1


Error_n = ['Error:Combined Statementwise brand count  (B1)']
df_name= pd.DataFrame(Error_n) 
existing_df = pd.read_excel(output_path)
startrow = existing_df.shape[0] + 4
with pd.ExcelWriter(output_path, engine='openpyxl', mode='a', if_sheet_exists='overlay') as writer:
    df_name.to_excel(writer, startrow=startrow, index=False, header=False)





df_global=df.copy()

df_global.reset_index(drop=True, inplace=True)



df_dictformation = pd.read_excel(r'D:\Input\Cigarette\Brand Health Study(October 2024)\Input\Data input\BHS 22-Oct-24_DataMap.xlsx','B1statement')

dict_format = dict(zip(df_dictformation['Statement1'], df_dictformation['Brand1']))
df_global.rename(columns=dict_format, inplace=True)
renamed_columns = list(dict_format.values())


sum_of_columns= df_global[renamed_columns].sum()




Valuecount1=pd.DataFrame(sum_of_columns)







# Count: Statement2






df_global=df.copy()

df_global.reset_index(drop=True, inplace=True)



df_dictformation = pd.read_excel(r'D:\Input\Cigarette\Brand Health Study(October 2024)\Input\Data input\BHS 22-Oct-24_DataMap.xlsx','B1statement')

dict_format = dict(zip(df_dictformation['Statement2'], df_dictformation['Brand2']))
df_global.rename(columns=dict_format, inplace=True)
renamed_columns = list(dict_format.values())

sum_of_columns= df_global[renamed_columns].sum()


Valuecount2=pd.DataFrame(sum_of_columns)




# Count: Statement3






df_global=df.copy()

df_global.reset_index(drop=True, inplace=True)



df_dictformation = pd.read_excel(r'D:\Input\Cigarette\Brand Health Study(October 2024)\Input\Data input\BHS 22-Oct-24_DataMap.xlsx','B1statement')

dict_format = dict(zip(df_dictformation['Statement3'], df_dictformation['Brand3']))
df_global.rename(columns=dict_format, inplace=True)
renamed_columns = list(dict_format.values())

sum_of_columns= df_global[renamed_columns].sum()


Valuecount3=pd.DataFrame(sum_of_columns)






# Count: Statement4






df_global=df.copy()

df_global.reset_index(drop=True, inplace=True)



df_dictformation = pd.read_excel(r'D:\Input\Cigarette\Brand Health Study(October 2024)\Input\Data input\BHS 22-Oct-24_DataMap.xlsx','B1statement')

dict_format = dict(zip(df_dictformation['Statement4'], df_dictformation['Brand4']))
df_global.rename(columns=dict_format, inplace=True)
renamed_columns = list(dict_format.values())

sum_of_columns= df_global[renamed_columns].sum()


Valuecount4=pd.DataFrame(sum_of_columns)







# Count: Statement5






df_global=df.copy()

df_global.reset_index(drop=True, inplace=True)



df_dictformation = pd.read_excel(r'D:\Input\Cigarette\Brand Health Study(October 2024)\Input\Data input\BHS 22-Oct-24_DataMap.xlsx','B1statement')

dict_format = dict(zip(df_dictformation['Statement5'], df_dictformation['Brand5']))
df_global.rename(columns=dict_format, inplace=True)
renamed_columns = list(dict_format.values())

sum_of_columns= df_global[renamed_columns].sum()


Valuecount5=pd.DataFrame(sum_of_columns)







# Count: Statement6






df_global=df.copy()

df_global.reset_index(drop=True, inplace=True)



df_dictformation = pd.read_excel(r'D:\Input\Cigarette\Brand Health Study(October 2024)\Input\Data input\BHS 22-Oct-24_DataMap.xlsx','B1statement')

dict_format = dict(zip(df_dictformation['Statement6'], df_dictformation['Brand6']))
df_global.rename(columns=dict_format, inplace=True)
renamed_columns = list(dict_format.values())

sum_of_columns= df_global[renamed_columns].sum()


Valuecount6=pd.DataFrame(sum_of_columns)








# Count: Statement7






df_global=df.copy()

df_global.reset_index(drop=True, inplace=True)



df_dictformation = pd.read_excel(r'D:\Input\Cigarette\Brand Health Study(October 2024)\Input\Data input\BHS 22-Oct-24_DataMap.xlsx','B1statement')

dict_format = dict(zip(df_dictformation['Statement7'], df_dictformation['Brand7']))
df_global.rename(columns=dict_format, inplace=True)
renamed_columns = list(dict_format.values())

sum_of_columns= df_global[renamed_columns].sum()


Valuecount7=pd.DataFrame(sum_of_columns)









# Count: Statement8






df_global=df.copy()

df_global.reset_index(drop=True, inplace=True)



df_dictformation = pd.read_excel(r'D:\Input\Cigarette\Brand Health Study(October 2024)\Input\Data input\BHS 22-Oct-24_DataMap.xlsx','B1statement')

dict_format = dict(zip(df_dictformation['Statement8'], df_dictformation['Brand8']))
df_global.rename(columns=dict_format, inplace=True)
renamed_columns = list(dict_format.values())

sum_of_columns= df_global[renamed_columns].sum()


Valuecount8=pd.DataFrame(sum_of_columns)











# Count: Statement9






df_global=df.copy()

df_global.reset_index(drop=True, inplace=True)



df_dictformation = pd.read_excel(r'D:\Input\Cigarette\Brand Health Study(October 2024)\Input\Data input\BHS 22-Oct-24_DataMap.xlsx','B1statement')

dict_format = dict(zip(df_dictformation['Statement9'], df_dictformation['Brand9']))
df_global.rename(columns=dict_format, inplace=True)
renamed_columns = list(dict_format.values())

sum_of_columns= df_global[renamed_columns].sum()


Valuecount9=pd.DataFrame(sum_of_columns)






# Count: Statement10






df_global=df.copy()

df_global.reset_index(drop=True, inplace=True)



df_dictformation = pd.read_excel(r'D:\Input\Cigarette\Brand Health Study(October 2024)\Input\Data input\BHS 22-Oct-24_DataMap.xlsx','B1statement')

dict_format = dict(zip(df_dictformation['Statement10'], df_dictformation['Brand10']))
df_global.rename(columns=dict_format, inplace=True)
renamed_columns = list(dict_format.values())

sum_of_columns= df_global[renamed_columns].sum()


Valuecount10=pd.DataFrame(sum_of_columns)






# Count: Statement11






df_global=df.copy()

df_global.reset_index(drop=True, inplace=True)



df_dictformation = pd.read_excel(r'D:\Input\Cigarette\Brand Health Study(October 2024)\Input\Data input\BHS 22-Oct-24_DataMap.xlsx','B1statement')

dict_format = dict(zip(df_dictformation['Statement11'], df_dictformation['Brand11']))
df_global.rename(columns=dict_format, inplace=True)
renamed_columns = list(dict_format.values())

sum_of_columns= df_global[renamed_columns].sum()


Valuecount11=pd.DataFrame(sum_of_columns)












# Count: Statement12






df_global=df.copy()

df_global.reset_index(drop=True, inplace=True)



df_dictformation = pd.read_excel(r'D:\Input\Cigarette\Brand Health Study(October 2024)\Input\Data input\BHS 22-Oct-24_DataMap.xlsx','B1statement')

dict_format = dict(zip(df_dictformation['Statement12'], df_dictformation['Brand12']))
df_global.rename(columns=dict_format, inplace=True)
renamed_columns = list(dict_format.values())

sum_of_columns= df_global[renamed_columns].sum()


Valuecount12=pd.DataFrame(sum_of_columns)






# Concat




resultant = pd.concat([Valuecount1,Valuecount2,Valuecount3,Valuecount4,Valuecount5,Valuecount6,Valuecount7,Valuecount8,Valuecount9,Valuecount10,Valuecount11,Valuecount12], axis=1)
resultant.columns = ['Overall its a good quality product ','Everything taken together the brand is appealing to me ','It has good taste','It offers satisfying smoking experience','It offers refreshing smoking experience','Brand is for younger people ','Is a modern brand','Is value for money','Proud to smoke with friends/ colleagues','Its for people like me','Is a Premium brand','Is an exciting brand']

total_sum = resultant.sum()
total_sum.name = 'Total_sum'
B1_statement_combined=resultant._append(total_sum)



inside_append_dataframe_with_blank_rows(output_path, B1_statement_combined)













# Count = Previous brand (Q24)

Error_n = ['Count = Previous brand (Q24)']
df_name= pd.DataFrame(Error_n) 
existing_df = pd.read_excel(output_path)
startrow = existing_df.shape[0] + 4
with pd.ExcelWriter(output_path, engine='openpyxl', mode='a', if_sheet_exists='overlay') as writer:
    df_name.to_excel(writer, startrow=startrow, index=False, header=False)



df_global=df.copy()
df_global.reset_index(drop=True, inplace=True)


df_dictformation = pd.read_excel(r'D:\Input\Cigarette\Brand Health Study(October 2024)\Input\Data input\BHS 22-Oct-24_DataMap.xlsx','MOUB')



# Join two columns into a dictionary
# Assuming 'Column1' and 'Column2' are the names of the columns you want to join
dict_format = dict(zip(df_dictformation['Column'], df_dictformation['Brand']))





df_s = df_global['Q24'].value_counts()


Valuecount12=pd.DataFrame(df_s)
# total_sum = Valuecount1.sum()
# total_sum.name = 'Total_sum'
# Valuecount1=Valuecount1._append(total_sum)




Valuecount12.index = Valuecount12.index.to_series().replace(dict_format)


inside_append_dataframe_with_blank_rows(output_path, Valuecount12)




